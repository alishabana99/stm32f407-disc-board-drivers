
FLORIDA_STM32_POV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001d8c  08001d8c  00011d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e2c  08001e2c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e2c  08001e2c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08001e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000044  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000026c6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009f9  00000000  00000000  00022772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00023170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001e8  00000000  00000000  000233e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027db  00000000  00000000  000235c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003d30  00000000  00000000  00025da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000db5e  00000000  00000000  00029ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00037631  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fcc  00000000  00000000  00037684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001d74 	.word	0x08001d74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08001d74 	.word	0x08001d74

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__io_putchar>:
 * @func __io_putchar
 *
 * @brief 	related to re-targeting printf() function
 *
 * */
int __io_putchar(int ch){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	USART_SendChar(USART_DEBUGGING_CHANNEL, ch);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	b2db      	uxtb	r3, r3
 800029c:	4619      	mov	r1, r3
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fc70 	bl	8000b84 <USART_SendChar>
	return ch;
 80002a4:	687b      	ldr	r3, [r7, #4]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <ADC_ConfigureGPIOPins>:
 *
 * @return void
 *
 */

static void ADC_ConfigureGPIOPins(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	GPIO_t* gpio = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
	RCC_AHB1PERIPH_en rcc_gpio = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	70fb      	strb	r3, [r7, #3]
	uint8_t index_pinno_map =0;
 80002be:	2300      	movs	r3, #0
 80002c0:	70bb      	strb	r3, [r7, #2]
	for(int8_t i = 0; i< g_ADC_TAKEN_CHANNELS_INDEX; i++){
 80002c2:	2300      	movs	r3, #0
 80002c4:	707b      	strb	r3, [r7, #1]
 80002c6:	e041      	b.n	800034c <ADC_ConfigureGPIOPins+0x9c>
		if(g_ADC_TAKEN_CHANNELS[i] <= 7){
 80002c8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80002cc:	4a25      	ldr	r2, [pc, #148]	; (8000364 <ADC_ConfigureGPIOPins+0xb4>)
 80002ce:	5cd3      	ldrb	r3, [r2, r3]
 80002d0:	2b07      	cmp	r3, #7
 80002d2:	d806      	bhi.n	80002e2 <ADC_ConfigureGPIOPins+0x32>
			/*PORTA Configurations*/
			gpio = GPIOA;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <ADC_ConfigureGPIOPins+0xb8>)
 80002d6:	607b      	str	r3, [r7, #4]
			index_pinno_map = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	70bb      	strb	r3, [r7, #2]
			rcc_gpio = RCC_AHB1_GPIOA;
 80002dc:	2300      	movs	r3, #0
 80002de:	70fb      	strb	r3, [r7, #3]
 80002e0:	e012      	b.n	8000308 <ADC_ConfigureGPIOPins+0x58>
		}else if(g_ADC_TAKEN_CHANNELS[i] <= 9){
 80002e2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80002e6:	4a1f      	ldr	r2, [pc, #124]	; (8000364 <ADC_ConfigureGPIOPins+0xb4>)
 80002e8:	5cd3      	ldrb	r3, [r2, r3]
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	d806      	bhi.n	80002fc <ADC_ConfigureGPIOPins+0x4c>
			/*PORTB Configurations*/
			gpio = GPIOB;
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <ADC_ConfigureGPIOPins+0xbc>)
 80002f0:	607b      	str	r3, [r7, #4]
			index_pinno_map = 8;
 80002f2:	2308      	movs	r3, #8
 80002f4:	70bb      	strb	r3, [r7, #2]
			rcc_gpio = RCC_AHB1_GPIOB;
 80002f6:	2301      	movs	r3, #1
 80002f8:	70fb      	strb	r3, [r7, #3]
 80002fa:	e005      	b.n	8000308 <ADC_ConfigureGPIOPins+0x58>

		}else{
			/*PORTC Configurations*/
			gpio = GPIOC;
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <ADC_ConfigureGPIOPins+0xc0>)
 80002fe:	607b      	str	r3, [r7, #4]
			index_pinno_map = 10;
 8000300:	230a      	movs	r3, #10
 8000302:	70bb      	strb	r3, [r7, #2]
			rcc_gpio = RCC_AHB1_GPIOC;
 8000304:	2302      	movs	r3, #2
 8000306:	70fb      	strb	r3, [r7, #3]
		}

		RCC_EnableAHB1Clock(rcc_gpio);
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fa1a 	bl	8000744 <RCC_EnableAHB1Clock>
		GPIO_SetPinMode(gpio, g_ADC_TAKEN_CHANNELS[i]-index_pinno_map, GPIO_ANALOG);
 8000310:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000314:	4a13      	ldr	r2, [pc, #76]	; (8000364 <ADC_ConfigureGPIOPins+0xb4>)
 8000316:	5cd2      	ldrb	r2, [r2, r3]
 8000318:	78bb      	ldrb	r3, [r7, #2]
 800031a:	1ad3      	subs	r3, r2, r3
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2203      	movs	r2, #3
 8000320:	4619      	mov	r1, r3
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f000 f9d5 	bl	80006d2 <GPIO_SetPinMode>
		GPIO_SetPinPull(gpio, g_ADC_TAKEN_CHANNELS[i]-index_pinno_map, GPIO_NO_PULL);
 8000328:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <ADC_ConfigureGPIOPins+0xb4>)
 800032e:	5cd2      	ldrb	r2, [r2, r3]
 8000330:	78bb      	ldrb	r3, [r7, #2]
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2200      	movs	r2, #0
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f000 f94f 	bl	80005de <GPIO_SetPinPull>
	for(int8_t i = 0; i< g_ADC_TAKEN_CHANNELS_INDEX; i++){
 8000340:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	3301      	adds	r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	707b      	strb	r3, [r7, #1]
 800034c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000350:	4a08      	ldr	r2, [pc, #32]	; (8000374 <ADC_ConfigureGPIOPins+0xc4>)
 8000352:	7812      	ldrb	r2, [r2, #0]
 8000354:	4293      	cmp	r3, r2
 8000356:	dbb7      	blt.n	80002c8 <ADC_ConfigureGPIOPins+0x18>

	}


}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000098 	.word	0x20000098
 8000368:	40020000 	.word	0x40020000
 800036c:	40020400 	.word	0x40020400
 8000370:	40020800 	.word	0x40020800
 8000374:	200000a7 	.word	0x200000a7

08000378 <ADC_Init>:
 * 			[implementation dependency]
 *
 * @return void
 *
 */
void ADC_Init(ADC_Handle_t* adc){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	/*Configure used channels' related gpio pins*/
	ADC_ConfigureGPIOPins();
 8000380:	f7ff ff96 	bl	80002b0 <ADC_ConfigureGPIOPins>

	/*Configure the dedicated ADC Peripheral*/

	//SCAN mode: single channel || multiple channels
	adc->instace->CR1 |= ((adc->configs.scan_mode)<< ADC_CR1_SCAN);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	685a      	ldr	r2, [r3, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	79db      	ldrb	r3, [r3, #7]
 800038e:	021b      	lsls	r3, r3, #8
 8000390:	4619      	mov	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	430a      	orrs	r2, r1
 8000398:	605a      	str	r2, [r3, #4]

	//Number of ADC Resolution bit
	adc->instace->CR1 |= ((adc->configs.resolution)<< ADC_CR1_RES);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685a      	ldr	r2, [r3, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	061b      	lsls	r3, r3, #24
 80003a6:	4619      	mov	r1, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	430a      	orrs	r2, r1
 80003ae:	605a      	str	r2, [r3, #4]

	//CONT mode: single conversion || multiple channels
	CHANGE_BIT_VAL(adc->instace->CR2, ADC_CR2_CONT, adc->configs.cont);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f023 0202 	bic.w	r2, r3, #2
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	7a1b      	ldrb	r3, [r3, #8]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	4619      	mov	r1, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	430a      	orrs	r2, r1
 80003c8:	609a      	str	r2, [r3, #8]

	//ALIGN: data register alignment { Right, Left }
	adc->instace->CR2 |= ((adc->configs.data_alignment)<< ADC_CR2_ALIGN);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	689a      	ldr	r2, [r3, #8]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	799b      	ldrb	r3, [r3, #6]
 80003d4:	02db      	lsls	r3, r3, #11
 80003d6:	4619      	mov	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	430a      	orrs	r2, r1
 80003de:	609a      	str	r2, [r3, #8]

	//ADC prescaler
	ADC_COMMON->CCR |= ((adc->configs.prescaler) <<ADC_CCR_ADCPRE);
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <ADC_Init+0xac>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	7912      	ldrb	r2, [r2, #4]
 80003e8:	0412      	lsls	r2, r2, #16
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <ADC_Init+0xac>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6053      	str	r3, [r2, #4]

	//number of conversion channels
	adc->instace->SQR1 |= ((adc->configs.num_of_conversions-1)<< ADC_SQR1_L);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	7a5b      	ldrb	r3, [r3, #9]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	051b      	lsls	r3, r3, #20
 8000400:	4619      	mov	r1, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	430a      	orrs	r2, r1
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c



	//Enable the ADC module
	SET_BIT(adc->instace->CR2, ADC_CR2_ADON);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f042 0201 	orr.w	r2, r2, #1
 8000418:	609a      	str	r2, [r3, #8]
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40012300 	.word	0x40012300

08000428 <ADC_ConfigureChannel>:
 * 			[implementation dependency]
 *
 * @return void
 *
 */
void ADC_ConfigureChannel(ADC_Handle_t* adc, ADC_ChannelConfig_t* channel){
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
	/*This is needed for the GPIO configuration step as the ADC_ConfigureGPIOPins() function
	 *configures all the used gpio pins by checking the taken channels.*/
	g_ADC_TAKEN_CHANNELS[g_ADC_TAKEN_CHANNELS_INDEX++] = channel->channel_num;
 8000432:	4b51      	ldr	r3, [pc, #324]	; (8000578 <ADC_ConfigureChannel+0x150>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	1c5a      	adds	r2, r3, #1
 8000438:	b2d1      	uxtb	r1, r2
 800043a:	4a4f      	ldr	r2, [pc, #316]	; (8000578 <ADC_ConfigureChannel+0x150>)
 800043c:	7011      	strb	r1, [r2, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	7819      	ldrb	r1, [r3, #0]
 8000444:	4b4d      	ldr	r3, [pc, #308]	; (800057c <ADC_ConfigureChannel+0x154>)
 8000446:	5499      	strb	r1, [r3, r2]


	/*Configure used channels' related gpio pins*/
	ADC_ConfigureGPIOPins();
 8000448:	f7ff ff32 	bl	80002b0 <ADC_ConfigureGPIOPins>



	//Enable ADC clock
	uint32_t adc_address_int = (uint32_t)adc->instace;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	60fb      	str	r3, [r7, #12]
	switch (adc_address_int) {
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4a4a      	ldr	r2, [pc, #296]	; (8000580 <ADC_ConfigureChannel+0x158>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d014      	beq.n	8000484 <ADC_ConfigureChannel+0x5c>
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	4a48      	ldr	r2, [pc, #288]	; (8000580 <ADC_ConfigureChannel+0x158>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d814      	bhi.n	800048c <ADC_ConfigureChannel+0x64>
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	4a47      	ldr	r2, [pc, #284]	; (8000584 <ADC_ConfigureChannel+0x15c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d004      	beq.n	8000474 <ADC_ConfigureChannel+0x4c>
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	4a46      	ldr	r2, [pc, #280]	; (8000588 <ADC_ConfigureChannel+0x160>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d004      	beq.n	800047c <ADC_ConfigureChannel+0x54>
			break;
		case (uint32_t)ADC3:
			RCC_EnableAPB2Clock(RCC_APB2_ADC3);
			break;
		default:
			break;
 8000472:	e00b      	b.n	800048c <ADC_ConfigureChannel+0x64>
			RCC_EnableAPB2Clock(RCC_APB2_ADC1);
 8000474:	2008      	movs	r0, #8
 8000476:	f000 f995 	bl	80007a4 <RCC_EnableAPB2Clock>
			break;
 800047a:	e008      	b.n	800048e <ADC_ConfigureChannel+0x66>
			RCC_EnableAPB2Clock(RCC_APB2_ADC2);
 800047c:	2009      	movs	r0, #9
 800047e:	f000 f991 	bl	80007a4 <RCC_EnableAPB2Clock>
			break;
 8000482:	e004      	b.n	800048e <ADC_ConfigureChannel+0x66>
			RCC_EnableAPB2Clock(RCC_APB2_ADC3);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 f98d 	bl	80007a4 <RCC_EnableAPB2Clock>
			break;
 800048a:	e000      	b.n	800048e <ADC_ConfigureChannel+0x66>
			break;
 800048c:	bf00      	nop
	}


	/*configuring the channel rank in the correspondent register
	 *based on its value*/
	uint8_t ch_rank = channel->rank;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	72fb      	strb	r3, [r7, #11]

	if(ch_rank <= 6){
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	2b06      	cmp	r3, #6
 8000498:	d812      	bhi.n	80004c0 <ADC_ConfigureChannel+0x98>
		adc->instace->SQR3 |= ((channel->channel_num)<< ((ch_rank-1)*5));
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	1e5a      	subs	r2, r3, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	4413      	add	r3, r2
 80004b0:	fa00 f303 	lsl.w	r3, r0, r3
 80004b4:	461a      	mov	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	430a      	orrs	r2, r1
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
 80004be:	e028      	b.n	8000512 <ADC_ConfigureChannel+0xea>

	}else if(ch_rank <= 12 ){
 80004c0:	7afb      	ldrb	r3, [r7, #11]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	d812      	bhi.n	80004ec <ADC_ConfigureChannel+0xc4>
		adc->instace->SQR2 |= ((channel->channel_num)<< ((ch_rank-7)*5));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	7afb      	ldrb	r3, [r7, #11]
 80004d4:	1fda      	subs	r2, r3, #7
 80004d6:	4613      	mov	r3, r2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	fa00 f303 	lsl.w	r3, r0, r3
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	430a      	orrs	r2, r1
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
 80004ea:	e012      	b.n	8000512 <ADC_ConfigureChannel+0xea>
	}else{
		//from 13 to 16
		adc->instace->SQR1 |= ((channel->channel_num)<< ((ch_rank-13)*5));
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	7afb      	ldrb	r3, [r7, #11]
 80004fa:	f1a3 020d 	sub.w	r2, r3, #13
 80004fe:	4613      	mov	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	fa00 f303 	lsl.w	r3, r0, r3
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	430a      	orrs	r2, r1
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/*configuring channel's sampling time in the correspondent register
	 * based on its value*/
	uint8_t ch_samp_time = channel->sampling_time;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	72bb      	strb	r3, [r7, #10]

	if(ch_samp_time > 9){
 8000518:	7abb      	ldrb	r3, [r7, #10]
 800051a:	2b09      	cmp	r3, #9
 800051c:	d914      	bls.n	8000548 <ADC_ConfigureChannel+0x120>
		adc->instace->SMPR1 |= (channel->sampling_time << (((channel->channel_num)-10)*3));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	68d9      	ldr	r1, [r3, #12]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	4618      	mov	r0, r3
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	f1a3 020a 	sub.w	r2, r3, #10
 8000532:	4613      	mov	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	fa00 f303 	lsl.w	r3, r0, r3
 800053c:	461a      	mov	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	430a      	orrs	r2, r1
 8000544:	60da      	str	r2, [r3, #12]
		//from 0 to 9
		adc->instace->SMPR2 |= (channel->sampling_time << (((channel->channel_num))*3));
	}


}
 8000546:	e012      	b.n	800056e <ADC_ConfigureChannel+0x146>
		adc->instace->SMPR2 |= (channel->sampling_time << (((channel->channel_num))*3));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	691a      	ldr	r2, [r3, #16]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	789b      	ldrb	r3, [r3, #2]
 8000552:	4618      	mov	r0, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	460b      	mov	r3, r1
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	440b      	add	r3, r1
 8000560:	fa00 f303 	lsl.w	r3, r0, r3
 8000564:	4619      	mov	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	430a      	orrs	r2, r1
 800056c:	611a      	str	r2, [r3, #16]
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000a7 	.word	0x200000a7
 800057c:	20000098 	.word	0x20000098
 8000580:	40012200 	.word	0x40012200
 8000584:	40012000 	.word	0x40012000
 8000588:	40012100 	.word	0x40012100

0800058c <ADC_Start>:
 * 		#ADC_SR:
 *			♦ EOC[1] 		-> End of conversion bit   |   0: not complete,    1: complete *
 * @return void
 *
 */
void ADC_Start(ADC_Handle_t* adc){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	SET_BIT(adc->instace->CR2, ADC_CR2_SWSTART);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005a2:	609a      	str	r2, [r3, #8]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <ADC_Read>:
 * 		#ADC_DR:
 *			♦ [1:16] 		-> ADC output data
 * @return void
 *
 */
uint16_t ADC_Read(ADC_Handle_t* adc){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	/*wait till we make sure that conversion is done*/
	while(GET_BIT(adc->instace->SR, ADC_SR_EOC) == 0); //while conversion not complete
 80005b8:	bf00      	nop
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	085b      	lsrs	r3, r3, #1
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f7      	beq.n	80005ba <ADC_Read+0xa>
	/*Read*/
	return adc->instace->DR;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d0:	b29b      	uxth	r3, r3

}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <GPIO_SetPinPull>:
 * @param GPIO_Pin_en pin[in]		Specifies the targeted pin
 * @param GPIO_Pull_en pull[in]			Specifies the pull functionality of the pin
 *
 * @return void
 */
void GPIO_SetPinPull(GPIO_t* port, GPIO_Pin_en pin, GPIO_Pull_en pull){
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	70fb      	strb	r3, [r7, #3]
 80005ea:	4613      	mov	r3, r2
 80005ec:	70bb      	strb	r3, [r7, #2]

	port->PUPDR |= (pull << (pin*2));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	78b9      	ldrb	r1, [r7, #2]
 80005f4:	78fa      	ldrb	r2, [r7, #3]
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	431a      	orrs	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60da      	str	r2, [r3, #12]

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <GPIO_SetPinOutputSpeed>:
 * @param GPIO_Pin_en pin[in]		Specifies the targeted pin
 * @param GPIO_Output_Speed_en ospeed[in]			Specifies the desired Output speed
 *
 * @return void
 */
void GPIO_SetPinOutputSpeed(GPIO_t* port, GPIO_Pin_en pin, GPIO_Output_Speed_en ospeed){
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	70fb      	strb	r3, [r7, #3]
 800061a:	4613      	mov	r3, r2
 800061c:	70bb      	strb	r3, [r7, #2]

	port->OSPEEDR |= (ospeed << (pin*2));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	78b9      	ldrb	r1, [r7, #2]
 8000624:	78fa      	ldrb	r2, [r7, #3]
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	431a      	orrs	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	609a      	str	r2, [r3, #8]

}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <GPIO_SetPinOutputType>:
 * @param GPIO_Pin_en pin[in]					Specifies the targeted pin
 * @param GPIO_Output_Type_en ot[in]			Specifies the desired Output type
 *
 * @return void
 */
void GPIO_SetPinOutputType(GPIO_t* port, GPIO_Pin_en pin, GPIO_Output_Type_en ot){
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
 800064a:	4613      	mov	r3, r2
 800064c:	70bb      	strb	r3, [r7, #2]

	CHANGE_BIT_VAL(port->OTYPER,pin,ot);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	78fa      	ldrb	r2, [r7, #3]
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	43d2      	mvns	r2, r2
 800065c:	4013      	ands	r3, r2
 800065e:	78b9      	ldrb	r1, [r7, #2]
 8000660:	78fa      	ldrb	r2, [r7, #3]
 8000662:	fa01 f202 	lsl.w	r2, r1, r2
 8000666:	431a      	orrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	605a      	str	r2, [r3, #4]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <GPIO_SetPinAF>:
 * @param GPIO_Pin_en pin[in]		Specifies the targeted pin
 * @param GPIO_AF_en[in]			Specifies the desired AF
 *
 * @return void
 */
void GPIO_SetPinAF(GPIO_t* port, GPIO_Pin_en pin, GPIO_AF_en af){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
 8000684:	4613      	mov	r3, r2
 8000686:	70bb      	strb	r3, [r7, #2]
	if(pin >= GPIO_PIN0 && pin <= GPIO_PIN7){
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d80a      	bhi.n	80006a4 <GPIO_SetPinAF+0x2c>
		//Will be using GPIOx->AFRL
		port->AFRL |= (af<<(pin*4)); //each pin[0-7]  correspondent 4 bits
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6a1b      	ldr	r3, [r3, #32]
 8000692:	78b9      	ldrb	r1, [r7, #2]
 8000694:	78fa      	ldrb	r2, [r7, #3]
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	fa01 f202 	lsl.w	r2, r1, r2
 800069c:	431a      	orrs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	621a      	str	r2, [r3, #32]
		port->AFRH |= (af<<((pin-8)*4)); //each pin[8-15]  correspondent 4 bits

	}else{
		//OUT OF RANGE
	}
}
 80006a2:	e010      	b.n	80006c6 <GPIO_SetPinAF+0x4e>
	}else if(pin >= GPIO_PIN8 && pin <= GPIO_PIN15){
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b07      	cmp	r3, #7
 80006a8:	d90d      	bls.n	80006c6 <GPIO_SetPinAF+0x4e>
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <GPIO_SetPinAF+0x4e>
		port->AFRH |= (af<<((pin-8)*4)); //each pin[8-15]  correspondent 4 bits
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b4:	78b9      	ldrb	r1, [r7, #2]
 80006b6:	78fa      	ldrb	r2, [r7, #3]
 80006b8:	3a08      	subs	r2, #8
 80006ba:	0092      	lsls	r2, r2, #2
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	431a      	orrs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <GPIO_SetPinMode>:
 * @param GPIO_Pin_en pin[in]		Specifies the targeted pin
 * @param GPIO_Mode_en mode[in]		Specifies the desired mode
 *
 * @return void
 */
void GPIO_SetPinMode(GPIO_t* port, GPIO_Pin_en pin, GPIO_Mode_en mode){
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	460b      	mov	r3, r1
 80006dc:	70fb      	strb	r3, [r7, #3]
 80006de:	4613      	mov	r3, r2
 80006e0:	70bb      	strb	r3, [r7, #2]

	/*Setting the mode bit by bit - As each pin has 2 correspondent bits*/
	CHANGE_BIT_VAL(port->MODER,pin*2,GET_BIT(mode,0));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	78fa      	ldrb	r2, [r7, #3]
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	2101      	movs	r1, #1
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	4013      	ands	r3, r2
 80006f4:	78ba      	ldrb	r2, [r7, #2]
 80006f6:	f002 0101 	and.w	r1, r2, #1
 80006fa:	78fa      	ldrb	r2, [r7, #3]
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000702:	431a      	orrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
	CHANGE_BIT_VAL(port->MODER,(pin*2)+1,GET_BIT(mode,1));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	78fa      	ldrb	r2, [r7, #3]
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	3201      	adds	r2, #1
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	43d2      	mvns	r2, r2
 800071a:	4013      	ands	r3, r2
 800071c:	78ba      	ldrb	r2, [r7, #2]
 800071e:	0852      	lsrs	r2, r2, #1
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	f002 0101 	and.w	r1, r2, #1
 8000726:	78fa      	ldrb	r2, [r7, #3]
 8000728:	0052      	lsls	r2, r2, #1
 800072a:	3201      	adds	r2, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	431a      	orrs	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]

}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <RCC_EnableAHB1Clock>:
 *
 * @param RCC_AHB1PERIPH_en periph[in]		Enum to specify the desired periph
 *
 * @return void
 */
void RCC_EnableAHB1Clock(RCC_AHB1PERIPH_en periph){
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB1ENR,periph);
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <RCC_EnableAHB1Clock+0x2c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	2101      	movs	r1, #1
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <RCC_EnableAHB1Clock+0x2c>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <RCC_EnableAPB1Clock>:
 *
 * @param RCC_APB1PERIPH_en periph[in]		Enum to specify the desired periph
 *
 * @return void
 */
void RCC_EnableAPB1Clock(RCC_APB1PERIPH_en periph){
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB1ENR, periph);
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <RCC_EnableAPB1Clock+0x2c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	79fa      	ldrb	r2, [r7, #7]
 8000784:	2101      	movs	r1, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <RCC_EnableAPB1Clock+0x2c>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <RCC_EnableAPB2Clock>:
 *
 * @param RCC_APB2PERIPH_en periph[in]		Enum to specify the desired periph
 *
 * @return void
 */
void RCC_EnableAPB2Clock(RCC_APB2PERIPH_en periph){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB2ENR, periph);
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <RCC_EnableAPB2Clock+0x2c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <RCC_EnableAPB2Clock+0x2c>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <RCC_EnableHSI>:
* 			[♥] HSIRDYF			-> 1: if HCLK is stable and HSIRDYDIE is set,  0: else
* 									This bit is cleared by setting HSIRDYC in that register
* 			[♥] HSIRDYIE		->	Enables interrupt if HSI is ready
* 			[♥] HSIRDYC			->	HSI ready interrupt clear
 */
void RCC_EnableHSI(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

	/*Select HSI as the System's Clock Source    SW0: 0    SW1: 0*/
	CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW0);
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <RCC_EnableHSI+0x4c>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	4a10      	ldr	r2, [pc, #64]	; (8000820 <RCC_EnableHSI+0x4c>)
 80007de:	f023 0301 	bic.w	r3, r3, #1
 80007e2:	6093      	str	r3, [r2, #8]
	CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW1);
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <RCC_EnableHSI+0x4c>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <RCC_EnableHSI+0x4c>)
 80007ea:	f023 0302 	bic.w	r3, r3, #2
 80007ee:	6093      	str	r3, [r2, #8]

	/*Turning On HSI Osc [16Mhz]*/
	SET_BIT(RCC->CR, RCC_CR_HSION);
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <RCC_EnableHSI+0x4c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <RCC_EnableHSI+0x4c>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6013      	str	r3, [r2, #0]

	/*Configuring other buses prescalers
	 *[they are configured based on pre-build configurations provided at rcc.h]*/
	RCC_SetAHBPrescaler();
 80007fc:	f000 f812 	bl	8000824 <RCC_SetAHBPrescaler>
	RCC_SetAPB1Prescaler();
 8000800:	f000 f824 	bl	800084c <RCC_SetAPB1Prescaler>
	RCC_SetAPB2Prescaler();
 8000804:	f000 f836 	bl	8000874 <RCC_SetAPB2Prescaler>

	/*Polling and waiting for HSI Clock to be ready*/
	while(GET_BIT(RCC->CR, RCC_CR_HSIRDY) != 1);
 8000808:	bf00      	nop
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <RCC_EnableHSI+0x4c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	085b      	lsrs	r3, r3, #1
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	2b01      	cmp	r3, #1
 8000816:	d1f8      	bne.n	800080a <RCC_EnableHSI+0x36>
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <RCC_SetAHBPrescaler>:
 * 		# RCC->CFGR:
 * 			[♥]	HPRE			->	AHB prescaler 				| values range [RCC_NO_DIV - RCC_DIV512]

 *
 */
void RCC_SetAHBPrescaler(){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

	/*Clearing AHB prescaler bits*/
	RCC->CFGR &= 0xFFFFFF0F;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <RCC_SetAHBPrescaler+0x24>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <RCC_SetAHBPrescaler+0x24>)
 800082e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000832:	6093      	str	r3, [r2, #8]

#if RCC_AHB_DIV == RCC_NO_DIV
	RCC->CFGR |= ( 0b000 << RCC_CFGR_HPRE);
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <RCC_SetAHBPrescaler+0x24>)
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <RCC_SetAHBPrescaler+0x24>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	6093      	str	r3, [r2, #8]
#elif RCC_AHB_DIV == RCC_DIV512
	RCC->CFGR |= (0b1111 << RCC_CFGR_HPRE);
#endif


}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <RCC_SetAPB1Prescaler>:
 * - Important Registers:
 * 		# RCC->CFGR:
 * 			[♥]	PPRE1	->	APB1 (Low Speed prescaler) 	| values range [RCC_NO_DIV - RCC_DIV16]
 *
 */
void RCC_SetAPB1Prescaler(){
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

	/*Clearing APB1 prescaler bits*/
	RCC->CFGR &= 0xFFFFE3FF;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <RCC_SetAPB1Prescaler+0x24>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <RCC_SetAPB1Prescaler+0x24>)
 8000856:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800085a:	6093      	str	r3, [r2, #8]

#if RCC_APB1_DIV == RCC_NO_DIV
	RCC->CFGR |= ( 0b000 << RCC_CFGR_HPRE);
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <RCC_SetAPB1Prescaler+0x24>)
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <RCC_SetAPB1Prescaler+0x24>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	6093      	str	r3, [r2, #8]
#elif RCC_AHB_DIV == RCC_DIV16
	RCC->CFGR |= (0b111 << RCC_CFGR_HPRE);

#endif

}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <RCC_SetAPB2Prescaler>:
 * - Important Registers:
 * 		# RCC->CFGR:
 * 			[♥]	PPRE2	->	APB2 (Low Speed prescaler) 	| values range [RCC_NO_DIV - RCC_DIV16]
 *
 */
void RCC_SetAPB2Prescaler(){
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	/*Clearing APB2 prescaler bits*/
	RCC->CFGR &= 0xFFFF1FFF;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <RCC_SetAPB2Prescaler+0x24>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <RCC_SetAPB2Prescaler+0x24>)
 800087e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000882:	6093      	str	r3, [r2, #8]

#if RCC_APB2_DIV == RCC_NO_DIV
	RCC->CFGR |= ( 0b000 << RCC_CFGR_HPRE);
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <RCC_SetAPB2Prescaler+0x24>)
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <RCC_SetAPB2Prescaler+0x24>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	6093      	str	r3, [r2, #8]
#elif RCC_AHB_DIV == RCC_DIV16
	RCC->CFGR |= (0b111 << RCC_CFGR_HPRE);

#endif

}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <USART_ConfigureGPIOPins>:
 *
 * @note STATIC FUNCTION
 * @return void
 * *
 */
static void USART_ConfigureGPIOPins(USART_Peripheral_en usart){
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	GPIO_t* Rxgpio;
	GPIO_Pin_en TxPin;
	GPIO_Pin_en RxPin;


	switch(usart){
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d81c      	bhi.n	80008e6 <USART_ConfigureGPIOPins+0x4a>
 80008ac:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <USART_ConfigureGPIOPins+0x18>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008e7 	.word	0x080008e7
 80008b8:	080008cd 	.word	0x080008cd
 80008bc:	080008e7 	.word	0x080008e7
 80008c0:	080008e7 	.word	0x080008e7
 80008c4:	080008e7 	.word	0x080008e7
 80008c8:	080008e7 	.word	0x080008e7
	case USART_USART1:

		break;
	case USART_USART2:
		TxRCCgpioPort = USART2_TX_RCC_GPIO_PORT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	75fb      	strb	r3, [r7, #23]
		RxRCCgpioPort = USART2_RX_RCC_GPIO_PORT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	75bb      	strb	r3, [r7, #22]
		Txgpio = USART2_TX_GPIO;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <USART_ConfigureGPIOPins+0xc4>)
 80008d6:	613b      	str	r3, [r7, #16]
		Rxgpio = USART2_RX_GPIO;
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <USART_ConfigureGPIOPins+0xc4>)
 80008da:	60fb      	str	r3, [r7, #12]
		TxPin = USART2_TX_PIN;
 80008dc:	2302      	movs	r3, #2
 80008de:	72fb      	strb	r3, [r7, #11]
		RxPin = USART2_RX_PIN;
 80008e0:	2303      	movs	r3, #3
 80008e2:	72bb      	strb	r3, [r7, #10]

		break;
 80008e4:	bf00      	nop
		break;
	}

	/*Configure related GPIO pins*/
		//Enable correspondent GPIO pins' clock for (Tx, Rx, ....)
		RCC_EnableAHB1Clock(TxRCCgpioPort);
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff2b 	bl	8000744 <RCC_EnableAHB1Clock>
		RCC_EnableAHB1Clock(RxRCCgpioPort);
 80008ee:	7dbb      	ldrb	r3, [r7, #22]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff27 	bl	8000744 <RCC_EnableAHB1Clock>

		//set mode to AF
		GPIO_SetPinMode(Txgpio, TxPin, GPIO_AF);
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	2202      	movs	r2, #2
 80008fa:	4619      	mov	r1, r3
 80008fc:	6938      	ldr	r0, [r7, #16]
 80008fe:	f7ff fee8 	bl	80006d2 <GPIO_SetPinMode>
		GPIO_SetPinMode(Rxgpio, RxPin, GPIO_AF);
 8000902:	7abb      	ldrb	r3, [r7, #10]
 8000904:	2202      	movs	r2, #2
 8000906:	4619      	mov	r1, r3
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff fee2 	bl	80006d2 <GPIO_SetPinMode>
		//set AF
		GPIO_SetPinAF(Txgpio, TxPin, GPIO_AF_USART2);
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	2207      	movs	r2, #7
 8000912:	4619      	mov	r1, r3
 8000914:	6938      	ldr	r0, [r7, #16]
 8000916:	f7ff feaf 	bl	8000678 <GPIO_SetPinAF>
		GPIO_SetPinAF(Rxgpio, RxPin, GPIO_AF_USART2);
 800091a:	7abb      	ldrb	r3, [r7, #10]
 800091c:	2207      	movs	r2, #7
 800091e:	4619      	mov	r1, r3
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff fea9 	bl	8000678 <GPIO_SetPinAF>


		//set push_pull functionality for Tx (the output pin)
		GPIO_SetPinOutputType(Txgpio, TxPin, GPIO_PUSH_PULL);
 8000926:	7afb      	ldrb	r3, [r7, #11]
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	6938      	ldr	r0, [r7, #16]
 800092e:	f7ff fe86 	bl	800063e <GPIO_SetPinOutputType>

		//set Output speed
		GPIO_SetPinOutputSpeed(Txgpio, TxPin, GPIO_MEDIUM_SPEED);
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	6938      	ldr	r0, [r7, #16]
 800093a:	f7ff fe68 	bl	800060e <GPIO_SetPinOutputSpeed>

		//set pullup functionality for Tx,Rx
		GPIO_SetPinPull(Txgpio, TxPin, GPIO_PULL_UP);	//Tx
 800093e:	7afb      	ldrb	r3, [r7, #11]
 8000940:	2201      	movs	r2, #1
 8000942:	4619      	mov	r1, r3
 8000944:	6938      	ldr	r0, [r7, #16]
 8000946:	f7ff fe4a 	bl	80005de <GPIO_SetPinPull>
		GPIO_SetPinPull(Rxgpio, RxPin, GPIO_PULL_UP);	//Rx
 800094a:	7abb      	ldrb	r3, [r7, #10]
 800094c:	2201      	movs	r2, #1
 800094e:	4619      	mov	r1, r3
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff fe44 	bl	80005de <GPIO_SetPinPull>



}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020000 	.word	0x40020000

08000964 <USART_SetBRRValues>:
 *
 * @note STATIC FUNCTION
 * @return void
 * *
 */
static void	USART_SetBRRValues(USART_Peripheral_en usart, uint32_t usart_freq, uint8_t over, uint32_t baud){
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	4613      	mov	r3, r2
 8000974:	73bb      	strb	r3, [r7, #14]
 => Baud = Usart_freq / baud* 8(2-OVER) * USARTDIV

 => USARTDIV = Usart_freq / baud* 8(2-OVER)

 *  */
	uint32_t usart_div = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
	uint16_t mantissa = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	82fb      	strh	r3, [r7, #22]
	uint16_t frac = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	82bb      	strh	r3, [r7, #20]

	usart_div = (usart_freq*100 ) / (baud * (8*(2-over)));
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2264      	movs	r2, #100	; 0x64
 8000986:	fb03 f202 	mul.w	r2, r3, r2
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	f1c3 0302 	rsb	r3, r3, #2
 8000990:	4619      	mov	r1, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	fb01 f303 	mul.w	r3, r1, r3
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	fbb2 f3f3 	udiv	r3, r2, r3
 800099e:	613b      	str	r3, [r7, #16]

	mantissa = (usart_div/100);
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4a34      	ldr	r2, [pc, #208]	; (8000a74 <USART_SetBRRValues+0x110>)
 80009a4:	fba2 2303 	umull	r2, r3, r2, r3
 80009a8:	095b      	lsrs	r3, r3, #5
 80009aa:	82fb      	strh	r3, [r7, #22]
	frac = usart_div - (mantissa*100);
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	8afb      	ldrh	r3, [r7, #22]
 80009b2:	4619      	mov	r1, r3
 80009b4:	0089      	lsls	r1, r1, #2
 80009b6:	440b      	add	r3, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	0088      	lsls	r0, r1, #2
 80009bc:	4619      	mov	r1, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	440b      	add	r3, r1
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	82bb      	strh	r3, [r7, #20]
	frac *= (8* (2-over));
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	f1c3 0302 	rsb	r3, r3, #2
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	8aba      	ldrh	r2, [r7, #20]
 80009d4:	fb12 f303 	smulbb	r3, r2, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	82bb      	strh	r3, [r7, #20]
	frac += 50; //rounding the number
 80009de:	8abb      	ldrh	r3, [r7, #20]
 80009e0:	3332      	adds	r3, #50	; 0x32
 80009e2:	82bb      	strh	r3, [r7, #20]

	frac /= 100;
 80009e4:	8abb      	ldrh	r3, [r7, #20]
 80009e6:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <USART_SetBRRValues+0x110>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	82bb      	strh	r3, [r7, #20]
	switch(over){
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <USART_SetBRRValues+0x98>
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d009      	beq.n	8000a0e <USART_SetBRRValues+0xaa>
 80009fa:	e014      	b.n	8000a26 <USART_SetBRRValues+0xc2>
	case 0:
		if(frac >= 16){
 80009fc:	8abb      	ldrh	r3, [r7, #20]
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	d90e      	bls.n	8000a20 <USART_SetBRRValues+0xbc>
			mantissa++;
 8000a02:	8afb      	ldrh	r3, [r7, #22]
 8000a04:	3301      	adds	r3, #1
 8000a06:	82fb      	strh	r3, [r7, #22]
			frac = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	82bb      	strh	r3, [r7, #20]
		}else{
			//noting
		}
		break;
 8000a0c:	e008      	b.n	8000a20 <USART_SetBRRValues+0xbc>
	case 1:
		if(frac >= 8){
 8000a0e:	8abb      	ldrh	r3, [r7, #20]
 8000a10:	2b07      	cmp	r3, #7
 8000a12:	d907      	bls.n	8000a24 <USART_SetBRRValues+0xc0>
			mantissa++;
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	3301      	adds	r3, #1
 8000a18:	82fb      	strh	r3, [r7, #22]
			frac = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	82bb      	strh	r3, [r7, #20]
		}else{
			//noting
		}
		break;
 8000a1e:	e001      	b.n	8000a24 <USART_SetBRRValues+0xc0>
		break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <USART_SetBRRValues+0xc2>
		break;
 8000a24:	bf00      	nop
	}

	g_USART_INSTANCES[usart]->BRR = 0;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <USART_SetBRRValues+0x114>)
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
	g_USART_INSTANCES[usart]->BRR |= (frac << USART_BRR_DIV_FRAC);
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <USART_SetBRRValues+0x114>)
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	6899      	ldr	r1, [r3, #8]
 8000a3c:	8aba      	ldrh	r2, [r7, #20]
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <USART_SetBRRValues+0x114>)
 8000a42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	609a      	str	r2, [r3, #8]
	g_USART_INSTANCES[usart]->BRR |= (mantissa << USART_BRR_DIV_MANTISSA);
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <USART_SetBRRValues+0x114>)
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	8afb      	ldrh	r3, [r7, #22]
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <USART_SetBRRValues+0x114>)
 8000a5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a62:	4302      	orrs	r2, r0
 8000a64:	609a      	str	r2, [r3, #8]
}
 8000a66:	bf00      	nop
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	51eb851f 	.word	0x51eb851f
 8000a78:	20000000 	.word	0x20000000

08000a7c <USART_Init>:
*
 *
 * @return void
 * *
 */
void USART_Init(USART_Peripheral_en usart){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]

/*Choosing which usart peripheral to configure*/
	switch(usart){
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	d871      	bhi.n	8000b70 <USART_Init+0xf4>
 8000a8c:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <USART_Init+0x18>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000b6f 	.word	0x08000b6f
 8000a98:	08000aad 	.word	0x08000aad
 8000a9c:	08000b6f 	.word	0x08000b6f
 8000aa0:	08000b6f 	.word	0x08000b6f
 8000aa4:	08000b6f 	.word	0x08000b6f
 8000aa8:	08000b6f 	.word	0x08000b6f

		break;
	case USART_USART2:

		/*Enable related  bus Clock*/
		RCC_EnableAPB1Clock(RCC_APB1_USART2);
 8000aac:	2011      	movs	r0, #17
 8000aae:	f7ff fe61 	bl	8000774 <RCC_EnableAPB1Clock>

			USART_ConfigureGPIOPins(usart);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fef1 	bl	800089c <USART_ConfigureGPIOPins>

			/*Configure Baud rate*/
			USART_SetBRRValues(usart, USART2_F_USART, USART2_OVERSAMPLE, USART2_BAUDRATE);
 8000aba:	79f8      	ldrb	r0, [r7, #7]
 8000abc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	492d      	ldr	r1, [pc, #180]	; (8000b78 <USART_Init+0xfc>)
 8000ac4:	f7ff ff4e 	bl	8000964 <USART_SetBRRValues>

			/*configure word length*/
			CHANGE_BIT_VAL(g_USART_INSTANCES[usart]->CR1,USART_CR1_M,USART2_WORDLENGTH);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <USART_Init+0x100>)
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4929      	ldr	r1, [pc, #164]	; (8000b7c <USART_Init+0x100>)
 8000ad6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ada:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ade:	60da      	str	r2, [r3, #12]

			/*configure parity*/
#if USART2_PARITY == PARITY_DISABLED
			CLEAR_BIT(g_USART_INSTANCES[usart]->CR1, USART_CR1_PCE);
#else
			SET_BIT(g_USART_INSTANCES[usart]->CR1, USART_CR1_PCE);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <USART_Init+0x100>)
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4923      	ldr	r1, [pc, #140]	; (8000b7c <USART_Init+0x100>)
 8000aee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000af2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000af6:	60da      	str	r2, [r3, #12]
			CHANGE_BIT_VAL(g_USART_INSTANCES[usart]->CR1,USART_CR1_PS,USART2_PARITY);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <USART_Init+0x100>)
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	491d      	ldr	r1, [pc, #116]	; (8000b7c <USART_Init+0x100>)
 8000b06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b0e:	60da      	str	r2, [r3, #12]
#endif

			/*configure stop bits*/
			g_USART_INSTANCES[usart]->CR2 |= ( USART2_STOP_BITS <<USART_CR2_STOP);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <USART_Init+0x100>)
 8000b14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4918      	ldr	r1, [pc, #96]	; (8000b7c <USART_Init+0x100>)
 8000b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b20:	6912      	ldr	r2, [r2, #16]
 8000b22:	611a      	str	r2, [r3, #16]

			/*configure oversampling 8|16*/
			CHANGE_BIT_VAL(g_USART_INSTANCES[usart]->CR1, USART_CR1_OVER8, USART2_OVERSAMPLE);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <USART_Init+0x100>)
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4912      	ldr	r1, [pc, #72]	; (8000b7c <USART_Init+0x100>)
 8000b32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b3a:	60da      	str	r2, [r3, #12]

			/*configure sampling method*/
			CHANGE_BIT_VAL(USART2->CR3, USART_CR3_ONEBIT, USART2_SAMPLING_METHOD);
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <USART_Init+0x104>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <USART_Init+0x104>)
 8000b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b46:	6153      	str	r3, [r2, #20]
#if USART2_MODE == TRANSMITTER_MODE
			SET_BIT(USART2->CR1,USART_CR1_TE);
#elif USART2_MODE == RECEIVER_MODE
			SET_BIT(USART2->CR1,USART_CR1_RE);
#else
			SET_BIT(USART2->CR1,USART_CR1_TE);
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <USART_Init+0x104>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <USART_Init+0x104>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	60d3      	str	r3, [r2, #12]
			SET_BIT(USART2->CR1,USART_CR1_RE);
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <USART_Init+0x104>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <USART_Init+0x104>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	60d3      	str	r3, [r2, #12]
#endif

			SET_BIT(USART2->CR1, USART_CR1_UE);
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <USART_Init+0x104>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <USART_Init+0x104>)
 8000b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b6a:	60d3      	str	r3, [r2, #12]
		break;
 8000b6c:	e000      	b.n	8000b70 <USART_Init+0xf4>
		break;
 8000b6e:	bf00      	nop
		break;
	}



}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	00f42400 	.word	0x00f42400
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	40004400 	.word	0x40004400

08000b84 <USART_SendChar>:
 * @param	uint8_t msg[IN]	-> the to-be-sent 8-bit message
 *
 * @return void
 * *
 */
void USART_SendChar(USART_Peripheral_en usart, uint8_t msg){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]

	while(!GET_BIT(g_USART_INSTANCES[usart]->SR,USART_SR_TXE));
 8000b94:	bf00      	nop
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <USART_SendChar+0x38>)
 8000b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	09db      	lsrs	r3, r3, #7
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f5      	beq.n	8000b96 <USART_SendChar+0x12>
	USART2->DR = msg;
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <USART_SendChar+0x3c>)
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	6053      	str	r3, [r2, #4]

}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <main>:

	uint32_t adc_output = 0;

#include "memory_map.h"

int main(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0

	/************** Initialization Zone ******************/
	//RCC CLOCK Init
	RCC_EnableHSI();
 8000bca:	f7ff fe03 	bl	80007d4 <RCC_EnableHSI>

//	LCD_Init();
	USART_Init(USART_USART2);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff ff54 	bl	8000a7c <USART_Init>

	/*ADC initialization*/
	//ADC
	ADC_Handle_t adc1_handle = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
	adc1_handle.instace = ADC1;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <main+0x88>)
 8000be0:	607b      	str	r3, [r7, #4]
	adc1_handle.configs.prescaler = ADC_PCLK_DIV2;
 8000be2:	2300      	movs	r3, #0
 8000be4:	723b      	strb	r3, [r7, #8]
	adc1_handle.configs.resolution = ADC_RES_12_bit;
 8000be6:	2300      	movs	r3, #0
 8000be8:	727b      	strb	r3, [r7, #9]
	adc1_handle.configs.num_of_conversions = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	737b      	strb	r3, [r7, #13]
	adc1_handle.configs.scan_mode = ADC_SCAN_MODE_DISABLED;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72fb      	strb	r3, [r7, #11]
	adc1_handle.configs.cont = ADC_CONT_MODE_ENABLED;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	733b      	strb	r3, [r7, #12]
	adc1_handle.configs.data_alignment = ADC_ALIGN_RIGHT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	72bb      	strb	r3, [r7, #10]

	//Channel
	ADC_ChannelConfig_t channel0 = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	460a      	mov	r2, r1
 8000c00:	801a      	strh	r2, [r3, #0]
 8000c02:	460a      	mov	r2, r1
 8000c04:	709a      	strb	r2, [r3, #2]
	channel0.channel_num = ADC_IN0_123;
 8000c06:	2300      	movs	r3, #0
 8000c08:	703b      	strb	r3, [r7, #0]
	channel0.rank = ADC_RANK1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	707b      	strb	r3, [r7, #1]
	channel0.sampling_time = ADC_SAMPT_480CYCLES;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	70bb      	strb	r3, [r7, #2]

	ADC_ConfigureChannel(&adc1_handle, &channel0);
 8000c12:	463a      	mov	r2, r7
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc05 	bl	8000428 <ADC_ConfigureChannel>
	ADC_Init(&adc1_handle);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fba9 	bl	8000378 <ADC_Init>

	/************ 1-shot instructions ***********/



	ADC_Start(&adc1_handle);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fcaf 	bl	800058c <ADC_Start>

	while(1){

		adc_output = ADC_Read(&adc1_handle);
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fcbd 	bl	80005b0 <ADC_Read>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <main+0x8c>)
 8000c3c:	601a      	str	r2, [r3, #0]
		printf("%d\n\r",adc_output);
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <main+0x8c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <main+0x90>)
 8000c46:	f000 f907 	bl	8000e58 <iprintf>
		adc_output = ADC_Read(&adc1_handle);
 8000c4a:	e7f0      	b.n	8000c2e <main+0x6a>
 8000c4c:	40012000 	.word	0x40012000
 8000c50:	200000a8 	.word	0x200000a8
 8000c54:	08001d8c 	.word	0x08001d8c

08000c58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e00a      	b.n	8000c80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c6a:	f3af 8000 	nop.w
 8000c6e:	4601      	mov	r1, r0
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	60ba      	str	r2, [r7, #8]
 8000c76:	b2ca      	uxtb	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf0      	blt.n	8000c6a <_read+0x12>
	}

return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e009      	b.n	8000cb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff faef 	bl	8000290 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf1      	blt.n	8000ca4 <_write+0x12>
	}
	return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f000 f846 	bl	8000df4 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200000ac 	.word	0x200000ac
 8000d9c:	200000c0 	.word	0x200000c0

08000da0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dce:	f000 f817 	bl	8000e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd2:	f7ff fef7 	bl	8000bc4 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   r0, =_estack
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000de4:	08001e34 	.word	0x08001e34
  ldr r2, =_sbss
 8000de8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dec:	200000c0 	.word	0x200000c0

08000df0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <__errno>:
 8000df4:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <__errno+0x8>)
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000018 	.word	0x20000018

08000e00 <__libc_init_array>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	4d0d      	ldr	r5, [pc, #52]	; (8000e38 <__libc_init_array+0x38>)
 8000e04:	4c0d      	ldr	r4, [pc, #52]	; (8000e3c <__libc_init_array+0x3c>)
 8000e06:	1b64      	subs	r4, r4, r5
 8000e08:	10a4      	asrs	r4, r4, #2
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	42a6      	cmp	r6, r4
 8000e0e:	d109      	bne.n	8000e24 <__libc_init_array+0x24>
 8000e10:	4d0b      	ldr	r5, [pc, #44]	; (8000e40 <__libc_init_array+0x40>)
 8000e12:	4c0c      	ldr	r4, [pc, #48]	; (8000e44 <__libc_init_array+0x44>)
 8000e14:	f000 ffae 	bl	8001d74 <_init>
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	10a4      	asrs	r4, r4, #2
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	42a6      	cmp	r6, r4
 8000e20:	d105      	bne.n	8000e2e <__libc_init_array+0x2e>
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e28:	4798      	blx	r3
 8000e2a:	3601      	adds	r6, #1
 8000e2c:	e7ee      	b.n	8000e0c <__libc_init_array+0xc>
 8000e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e32:	4798      	blx	r3
 8000e34:	3601      	adds	r6, #1
 8000e36:	e7f2      	b.n	8000e1e <__libc_init_array+0x1e>
 8000e38:	08001e2c 	.word	0x08001e2c
 8000e3c:	08001e2c 	.word	0x08001e2c
 8000e40:	08001e2c 	.word	0x08001e2c
 8000e44:	08001e30 	.word	0x08001e30

08000e48 <memset>:
 8000e48:	4402      	add	r2, r0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d100      	bne.n	8000e52 <memset+0xa>
 8000e50:	4770      	bx	lr
 8000e52:	f803 1b01 	strb.w	r1, [r3], #1
 8000e56:	e7f9      	b.n	8000e4c <memset+0x4>

08000e58 <iprintf>:
 8000e58:	b40f      	push	{r0, r1, r2, r3}
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <iprintf+0x2c>)
 8000e5c:	b513      	push	{r0, r1, r4, lr}
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	b124      	cbz	r4, 8000e6c <iprintf+0x14>
 8000e62:	69a3      	ldr	r3, [r4, #24]
 8000e64:	b913      	cbnz	r3, 8000e6c <iprintf+0x14>
 8000e66:	4620      	mov	r0, r4
 8000e68:	f000 f866 	bl	8000f38 <__sinit>
 8000e6c:	ab05      	add	r3, sp, #20
 8000e6e:	9a04      	ldr	r2, [sp, #16]
 8000e70:	68a1      	ldr	r1, [r4, #8]
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	4620      	mov	r0, r4
 8000e76:	f000 f9bd 	bl	80011f4 <_vfiprintf_r>
 8000e7a:	b002      	add	sp, #8
 8000e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e80:	b004      	add	sp, #16
 8000e82:	4770      	bx	lr
 8000e84:	20000018 	.word	0x20000018

08000e88 <std>:
 8000e88:	2300      	movs	r3, #0
 8000e8a:	b510      	push	{r4, lr}
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8000e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e96:	6083      	str	r3, [r0, #8]
 8000e98:	8181      	strh	r1, [r0, #12]
 8000e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8000e9c:	81c2      	strh	r2, [r0, #14]
 8000e9e:	6183      	str	r3, [r0, #24]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	305c      	adds	r0, #92	; 0x5c
 8000ea6:	f7ff ffcf 	bl	8000e48 <memset>
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <std+0x38>)
 8000eac:	6263      	str	r3, [r4, #36]	; 0x24
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <std+0x3c>)
 8000eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <std+0x40>)
 8000eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <std+0x44>)
 8000eb8:	6224      	str	r4, [r4, #32]
 8000eba:	6323      	str	r3, [r4, #48]	; 0x30
 8000ebc:	bd10      	pop	{r4, pc}
 8000ebe:	bf00      	nop
 8000ec0:	0800179d 	.word	0x0800179d
 8000ec4:	080017bf 	.word	0x080017bf
 8000ec8:	080017f7 	.word	0x080017f7
 8000ecc:	0800181b 	.word	0x0800181b

08000ed0 <_cleanup_r>:
 8000ed0:	4901      	ldr	r1, [pc, #4]	; (8000ed8 <_cleanup_r+0x8>)
 8000ed2:	f000 b8af 	b.w	8001034 <_fwalk_reent>
 8000ed6:	bf00      	nop
 8000ed8:	08001af5 	.word	0x08001af5

08000edc <__sfmoreglue>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	2268      	movs	r2, #104	; 0x68
 8000ee0:	1e4d      	subs	r5, r1, #1
 8000ee2:	4355      	muls	r5, r2
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000eea:	f000 f8e5 	bl	80010b8 <_malloc_r>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	b140      	cbz	r0, 8000f04 <__sfmoreglue+0x28>
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ef8:	300c      	adds	r0, #12
 8000efa:	60a0      	str	r0, [r4, #8]
 8000efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f00:	f7ff ffa2 	bl	8000e48 <memset>
 8000f04:	4620      	mov	r0, r4
 8000f06:	bd70      	pop	{r4, r5, r6, pc}

08000f08 <__sfp_lock_acquire>:
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <__sfp_lock_acquire+0x8>)
 8000f0a:	f000 b8b3 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8000f0e:	bf00      	nop
 8000f10:	200000b1 	.word	0x200000b1

08000f14 <__sfp_lock_release>:
 8000f14:	4801      	ldr	r0, [pc, #4]	; (8000f1c <__sfp_lock_release+0x8>)
 8000f16:	f000 b8ae 	b.w	8001076 <__retarget_lock_release_recursive>
 8000f1a:	bf00      	nop
 8000f1c:	200000b1 	.word	0x200000b1

08000f20 <__sinit_lock_acquire>:
 8000f20:	4801      	ldr	r0, [pc, #4]	; (8000f28 <__sinit_lock_acquire+0x8>)
 8000f22:	f000 b8a7 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8000f26:	bf00      	nop
 8000f28:	200000b2 	.word	0x200000b2

08000f2c <__sinit_lock_release>:
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <__sinit_lock_release+0x8>)
 8000f2e:	f000 b8a2 	b.w	8001076 <__retarget_lock_release_recursive>
 8000f32:	bf00      	nop
 8000f34:	200000b2 	.word	0x200000b2

08000f38 <__sinit>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	f7ff fff0 	bl	8000f20 <__sinit_lock_acquire>
 8000f40:	69a3      	ldr	r3, [r4, #24]
 8000f42:	b11b      	cbz	r3, 8000f4c <__sinit+0x14>
 8000f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f48:	f7ff bff0 	b.w	8000f2c <__sinit_lock_release>
 8000f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000f50:	6523      	str	r3, [r4, #80]	; 0x50
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <__sinit+0x68>)
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <__sinit+0x6c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	bf04      	itt	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	61a3      	streq	r3, [r4, #24]
 8000f62:	4620      	mov	r0, r4
 8000f64:	f000 f820 	bl	8000fa8 <__sfp>
 8000f68:	6060      	str	r0, [r4, #4]
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f000 f81c 	bl	8000fa8 <__sfp>
 8000f70:	60a0      	str	r0, [r4, #8]
 8000f72:	4620      	mov	r0, r4
 8000f74:	f000 f818 	bl	8000fa8 <__sfp>
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60e0      	str	r0, [r4, #12]
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	6860      	ldr	r0, [r4, #4]
 8000f80:	f7ff ff82 	bl	8000e88 <std>
 8000f84:	68a0      	ldr	r0, [r4, #8]
 8000f86:	2201      	movs	r2, #1
 8000f88:	2109      	movs	r1, #9
 8000f8a:	f7ff ff7d 	bl	8000e88 <std>
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	2202      	movs	r2, #2
 8000f92:	2112      	movs	r1, #18
 8000f94:	f7ff ff78 	bl	8000e88 <std>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61a3      	str	r3, [r4, #24]
 8000f9c:	e7d2      	b.n	8000f44 <__sinit+0xc>
 8000f9e:	bf00      	nop
 8000fa0:	08001d94 	.word	0x08001d94
 8000fa4:	08000ed1 	.word	0x08000ed1

08000fa8 <__sfp>:
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	4607      	mov	r7, r0
 8000fac:	f7ff ffac 	bl	8000f08 <__sfp_lock_acquire>
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <__sfp+0x84>)
 8000fb2:	681e      	ldr	r6, [r3, #0]
 8000fb4:	69b3      	ldr	r3, [r6, #24]
 8000fb6:	b913      	cbnz	r3, 8000fbe <__sfp+0x16>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff ffbd 	bl	8000f38 <__sinit>
 8000fbe:	3648      	adds	r6, #72	; 0x48
 8000fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	d503      	bpl.n	8000fd0 <__sfp+0x28>
 8000fc8:	6833      	ldr	r3, [r6, #0]
 8000fca:	b30b      	cbz	r3, 8001010 <__sfp+0x68>
 8000fcc:	6836      	ldr	r6, [r6, #0]
 8000fce:	e7f7      	b.n	8000fc0 <__sfp+0x18>
 8000fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000fd4:	b9d5      	cbnz	r5, 800100c <__sfp+0x64>
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <__sfp+0x88>)
 8000fd8:	60e3      	str	r3, [r4, #12]
 8000fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000fde:	6665      	str	r5, [r4, #100]	; 0x64
 8000fe0:	f000 f847 	bl	8001072 <__retarget_lock_init_recursive>
 8000fe4:	f7ff ff96 	bl	8000f14 <__sfp_lock_release>
 8000fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ff0:	6025      	str	r5, [r4, #0]
 8000ff2:	61a5      	str	r5, [r4, #24]
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ffc:	f7ff ff24 	bl	8000e48 <memset>
 8001000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001008:	4620      	mov	r0, r4
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100c:	3468      	adds	r4, #104	; 0x68
 800100e:	e7d9      	b.n	8000fc4 <__sfp+0x1c>
 8001010:	2104      	movs	r1, #4
 8001012:	4638      	mov	r0, r7
 8001014:	f7ff ff62 	bl	8000edc <__sfmoreglue>
 8001018:	4604      	mov	r4, r0
 800101a:	6030      	str	r0, [r6, #0]
 800101c:	2800      	cmp	r0, #0
 800101e:	d1d5      	bne.n	8000fcc <__sfp+0x24>
 8001020:	f7ff ff78 	bl	8000f14 <__sfp_lock_release>
 8001024:	230c      	movs	r3, #12
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	e7ee      	b.n	8001008 <__sfp+0x60>
 800102a:	bf00      	nop
 800102c:	08001d94 	.word	0x08001d94
 8001030:	ffff0001 	.word	0xffff0001

08001034 <_fwalk_reent>:
 8001034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001038:	4606      	mov	r6, r0
 800103a:	4688      	mov	r8, r1
 800103c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001040:	2700      	movs	r7, #0
 8001042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001046:	f1b9 0901 	subs.w	r9, r9, #1
 800104a:	d505      	bpl.n	8001058 <_fwalk_reent+0x24>
 800104c:	6824      	ldr	r4, [r4, #0]
 800104e:	2c00      	cmp	r4, #0
 8001050:	d1f7      	bne.n	8001042 <_fwalk_reent+0xe>
 8001052:	4638      	mov	r0, r7
 8001054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001058:	89ab      	ldrh	r3, [r5, #12]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d907      	bls.n	800106e <_fwalk_reent+0x3a>
 800105e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001062:	3301      	adds	r3, #1
 8001064:	d003      	beq.n	800106e <_fwalk_reent+0x3a>
 8001066:	4629      	mov	r1, r5
 8001068:	4630      	mov	r0, r6
 800106a:	47c0      	blx	r8
 800106c:	4307      	orrs	r7, r0
 800106e:	3568      	adds	r5, #104	; 0x68
 8001070:	e7e9      	b.n	8001046 <_fwalk_reent+0x12>

08001072 <__retarget_lock_init_recursive>:
 8001072:	4770      	bx	lr

08001074 <__retarget_lock_acquire_recursive>:
 8001074:	4770      	bx	lr

08001076 <__retarget_lock_release_recursive>:
 8001076:	4770      	bx	lr

08001078 <sbrk_aligned>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	4e0e      	ldr	r6, [pc, #56]	; (80010b4 <sbrk_aligned+0x3c>)
 800107c:	460c      	mov	r4, r1
 800107e:	6831      	ldr	r1, [r6, #0]
 8001080:	4605      	mov	r5, r0
 8001082:	b911      	cbnz	r1, 800108a <sbrk_aligned+0x12>
 8001084:	f000 fb7a 	bl	800177c <_sbrk_r>
 8001088:	6030      	str	r0, [r6, #0]
 800108a:	4621      	mov	r1, r4
 800108c:	4628      	mov	r0, r5
 800108e:	f000 fb75 	bl	800177c <_sbrk_r>
 8001092:	1c43      	adds	r3, r0, #1
 8001094:	d00a      	beq.n	80010ac <sbrk_aligned+0x34>
 8001096:	1cc4      	adds	r4, r0, #3
 8001098:	f024 0403 	bic.w	r4, r4, #3
 800109c:	42a0      	cmp	r0, r4
 800109e:	d007      	beq.n	80010b0 <sbrk_aligned+0x38>
 80010a0:	1a21      	subs	r1, r4, r0
 80010a2:	4628      	mov	r0, r5
 80010a4:	f000 fb6a 	bl	800177c <_sbrk_r>
 80010a8:	3001      	adds	r0, #1
 80010aa:	d101      	bne.n	80010b0 <sbrk_aligned+0x38>
 80010ac:	f04f 34ff 	mov.w	r4, #4294967295
 80010b0:	4620      	mov	r0, r4
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
 80010b4:	200000b8 	.word	0x200000b8

080010b8 <_malloc_r>:
 80010b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010bc:	1ccd      	adds	r5, r1, #3
 80010be:	f025 0503 	bic.w	r5, r5, #3
 80010c2:	3508      	adds	r5, #8
 80010c4:	2d0c      	cmp	r5, #12
 80010c6:	bf38      	it	cc
 80010c8:	250c      	movcc	r5, #12
 80010ca:	2d00      	cmp	r5, #0
 80010cc:	4607      	mov	r7, r0
 80010ce:	db01      	blt.n	80010d4 <_malloc_r+0x1c>
 80010d0:	42a9      	cmp	r1, r5
 80010d2:	d905      	bls.n	80010e0 <_malloc_r+0x28>
 80010d4:	230c      	movs	r3, #12
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	2600      	movs	r6, #0
 80010da:	4630      	mov	r0, r6
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e0:	4e2e      	ldr	r6, [pc, #184]	; (800119c <_malloc_r+0xe4>)
 80010e2:	f000 fdbb 	bl	8001c5c <__malloc_lock>
 80010e6:	6833      	ldr	r3, [r6, #0]
 80010e8:	461c      	mov	r4, r3
 80010ea:	bb34      	cbnz	r4, 800113a <_malloc_r+0x82>
 80010ec:	4629      	mov	r1, r5
 80010ee:	4638      	mov	r0, r7
 80010f0:	f7ff ffc2 	bl	8001078 <sbrk_aligned>
 80010f4:	1c43      	adds	r3, r0, #1
 80010f6:	4604      	mov	r4, r0
 80010f8:	d14d      	bne.n	8001196 <_malloc_r+0xde>
 80010fa:	6834      	ldr	r4, [r6, #0]
 80010fc:	4626      	mov	r6, r4
 80010fe:	2e00      	cmp	r6, #0
 8001100:	d140      	bne.n	8001184 <_malloc_r+0xcc>
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	4631      	mov	r1, r6
 8001106:	4638      	mov	r0, r7
 8001108:	eb04 0803 	add.w	r8, r4, r3
 800110c:	f000 fb36 	bl	800177c <_sbrk_r>
 8001110:	4580      	cmp	r8, r0
 8001112:	d13a      	bne.n	800118a <_malloc_r+0xd2>
 8001114:	6821      	ldr	r1, [r4, #0]
 8001116:	3503      	adds	r5, #3
 8001118:	1a6d      	subs	r5, r5, r1
 800111a:	f025 0503 	bic.w	r5, r5, #3
 800111e:	3508      	adds	r5, #8
 8001120:	2d0c      	cmp	r5, #12
 8001122:	bf38      	it	cc
 8001124:	250c      	movcc	r5, #12
 8001126:	4629      	mov	r1, r5
 8001128:	4638      	mov	r0, r7
 800112a:	f7ff ffa5 	bl	8001078 <sbrk_aligned>
 800112e:	3001      	adds	r0, #1
 8001130:	d02b      	beq.n	800118a <_malloc_r+0xd2>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	442b      	add	r3, r5
 8001136:	6023      	str	r3, [r4, #0]
 8001138:	e00e      	b.n	8001158 <_malloc_r+0xa0>
 800113a:	6822      	ldr	r2, [r4, #0]
 800113c:	1b52      	subs	r2, r2, r5
 800113e:	d41e      	bmi.n	800117e <_malloc_r+0xc6>
 8001140:	2a0b      	cmp	r2, #11
 8001142:	d916      	bls.n	8001172 <_malloc_r+0xba>
 8001144:	1961      	adds	r1, r4, r5
 8001146:	42a3      	cmp	r3, r4
 8001148:	6025      	str	r5, [r4, #0]
 800114a:	bf18      	it	ne
 800114c:	6059      	strne	r1, [r3, #4]
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	bf08      	it	eq
 8001152:	6031      	streq	r1, [r6, #0]
 8001154:	5162      	str	r2, [r4, r5]
 8001156:	604b      	str	r3, [r1, #4]
 8001158:	4638      	mov	r0, r7
 800115a:	f104 060b 	add.w	r6, r4, #11
 800115e:	f000 fd83 	bl	8001c68 <__malloc_unlock>
 8001162:	f026 0607 	bic.w	r6, r6, #7
 8001166:	1d23      	adds	r3, r4, #4
 8001168:	1af2      	subs	r2, r6, r3
 800116a:	d0b6      	beq.n	80010da <_malloc_r+0x22>
 800116c:	1b9b      	subs	r3, r3, r6
 800116e:	50a3      	str	r3, [r4, r2]
 8001170:	e7b3      	b.n	80010da <_malloc_r+0x22>
 8001172:	6862      	ldr	r2, [r4, #4]
 8001174:	42a3      	cmp	r3, r4
 8001176:	bf0c      	ite	eq
 8001178:	6032      	streq	r2, [r6, #0]
 800117a:	605a      	strne	r2, [r3, #4]
 800117c:	e7ec      	b.n	8001158 <_malloc_r+0xa0>
 800117e:	4623      	mov	r3, r4
 8001180:	6864      	ldr	r4, [r4, #4]
 8001182:	e7b2      	b.n	80010ea <_malloc_r+0x32>
 8001184:	4634      	mov	r4, r6
 8001186:	6876      	ldr	r6, [r6, #4]
 8001188:	e7b9      	b.n	80010fe <_malloc_r+0x46>
 800118a:	230c      	movs	r3, #12
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4638      	mov	r0, r7
 8001190:	f000 fd6a 	bl	8001c68 <__malloc_unlock>
 8001194:	e7a1      	b.n	80010da <_malloc_r+0x22>
 8001196:	6025      	str	r5, [r4, #0]
 8001198:	e7de      	b.n	8001158 <_malloc_r+0xa0>
 800119a:	bf00      	nop
 800119c:	200000b4 	.word	0x200000b4

080011a0 <__sfputc_r>:
 80011a0:	6893      	ldr	r3, [r2, #8]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	b410      	push	{r4}
 80011a8:	6093      	str	r3, [r2, #8]
 80011aa:	da08      	bge.n	80011be <__sfputc_r+0x1e>
 80011ac:	6994      	ldr	r4, [r2, #24]
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	db01      	blt.n	80011b6 <__sfputc_r+0x16>
 80011b2:	290a      	cmp	r1, #10
 80011b4:	d103      	bne.n	80011be <__sfputc_r+0x1e>
 80011b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011ba:	f000 bb33 	b.w	8001824 <__swbuf_r>
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	1c58      	adds	r0, r3, #1
 80011c2:	6010      	str	r0, [r2, #0]
 80011c4:	7019      	strb	r1, [r3, #0]
 80011c6:	4608      	mov	r0, r1
 80011c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <__sfputs_r>:
 80011ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d0:	4606      	mov	r6, r0
 80011d2:	460f      	mov	r7, r1
 80011d4:	4614      	mov	r4, r2
 80011d6:	18d5      	adds	r5, r2, r3
 80011d8:	42ac      	cmp	r4, r5
 80011da:	d101      	bne.n	80011e0 <__sfputs_r+0x12>
 80011dc:	2000      	movs	r0, #0
 80011de:	e007      	b.n	80011f0 <__sfputs_r+0x22>
 80011e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011e4:	463a      	mov	r2, r7
 80011e6:	4630      	mov	r0, r6
 80011e8:	f7ff ffda 	bl	80011a0 <__sfputc_r>
 80011ec:	1c43      	adds	r3, r0, #1
 80011ee:	d1f3      	bne.n	80011d8 <__sfputs_r+0xa>
 80011f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080011f4 <_vfiprintf_r>:
 80011f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f8:	460d      	mov	r5, r1
 80011fa:	b09d      	sub	sp, #116	; 0x74
 80011fc:	4614      	mov	r4, r2
 80011fe:	4698      	mov	r8, r3
 8001200:	4606      	mov	r6, r0
 8001202:	b118      	cbz	r0, 800120c <_vfiprintf_r+0x18>
 8001204:	6983      	ldr	r3, [r0, #24]
 8001206:	b90b      	cbnz	r3, 800120c <_vfiprintf_r+0x18>
 8001208:	f7ff fe96 	bl	8000f38 <__sinit>
 800120c:	4b89      	ldr	r3, [pc, #548]	; (8001434 <_vfiprintf_r+0x240>)
 800120e:	429d      	cmp	r5, r3
 8001210:	d11b      	bne.n	800124a <_vfiprintf_r+0x56>
 8001212:	6875      	ldr	r5, [r6, #4]
 8001214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001216:	07d9      	lsls	r1, r3, #31
 8001218:	d405      	bmi.n	8001226 <_vfiprintf_r+0x32>
 800121a:	89ab      	ldrh	r3, [r5, #12]
 800121c:	059a      	lsls	r2, r3, #22
 800121e:	d402      	bmi.n	8001226 <_vfiprintf_r+0x32>
 8001220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001222:	f7ff ff27 	bl	8001074 <__retarget_lock_acquire_recursive>
 8001226:	89ab      	ldrh	r3, [r5, #12]
 8001228:	071b      	lsls	r3, r3, #28
 800122a:	d501      	bpl.n	8001230 <_vfiprintf_r+0x3c>
 800122c:	692b      	ldr	r3, [r5, #16]
 800122e:	b9eb      	cbnz	r3, 800126c <_vfiprintf_r+0x78>
 8001230:	4629      	mov	r1, r5
 8001232:	4630      	mov	r0, r6
 8001234:	f000 fb5a 	bl	80018ec <__swsetup_r>
 8001238:	b1c0      	cbz	r0, 800126c <_vfiprintf_r+0x78>
 800123a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800123c:	07dc      	lsls	r4, r3, #31
 800123e:	d50e      	bpl.n	800125e <_vfiprintf_r+0x6a>
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	b01d      	add	sp, #116	; 0x74
 8001246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800124a:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <_vfiprintf_r+0x244>)
 800124c:	429d      	cmp	r5, r3
 800124e:	d101      	bne.n	8001254 <_vfiprintf_r+0x60>
 8001250:	68b5      	ldr	r5, [r6, #8]
 8001252:	e7df      	b.n	8001214 <_vfiprintf_r+0x20>
 8001254:	4b79      	ldr	r3, [pc, #484]	; (800143c <_vfiprintf_r+0x248>)
 8001256:	429d      	cmp	r5, r3
 8001258:	bf08      	it	eq
 800125a:	68f5      	ldreq	r5, [r6, #12]
 800125c:	e7da      	b.n	8001214 <_vfiprintf_r+0x20>
 800125e:	89ab      	ldrh	r3, [r5, #12]
 8001260:	0598      	lsls	r0, r3, #22
 8001262:	d4ed      	bmi.n	8001240 <_vfiprintf_r+0x4c>
 8001264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001266:	f7ff ff06 	bl	8001076 <__retarget_lock_release_recursive>
 800126a:	e7e9      	b.n	8001240 <_vfiprintf_r+0x4c>
 800126c:	2300      	movs	r3, #0
 800126e:	9309      	str	r3, [sp, #36]	; 0x24
 8001270:	2320      	movs	r3, #32
 8001272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001276:	f8cd 800c 	str.w	r8, [sp, #12]
 800127a:	2330      	movs	r3, #48	; 0x30
 800127c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001440 <_vfiprintf_r+0x24c>
 8001280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001284:	f04f 0901 	mov.w	r9, #1
 8001288:	4623      	mov	r3, r4
 800128a:	469a      	mov	sl, r3
 800128c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001290:	b10a      	cbz	r2, 8001296 <_vfiprintf_r+0xa2>
 8001292:	2a25      	cmp	r2, #37	; 0x25
 8001294:	d1f9      	bne.n	800128a <_vfiprintf_r+0x96>
 8001296:	ebba 0b04 	subs.w	fp, sl, r4
 800129a:	d00b      	beq.n	80012b4 <_vfiprintf_r+0xc0>
 800129c:	465b      	mov	r3, fp
 800129e:	4622      	mov	r2, r4
 80012a0:	4629      	mov	r1, r5
 80012a2:	4630      	mov	r0, r6
 80012a4:	f7ff ff93 	bl	80011ce <__sfputs_r>
 80012a8:	3001      	adds	r0, #1
 80012aa:	f000 80aa 	beq.w	8001402 <_vfiprintf_r+0x20e>
 80012ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012b0:	445a      	add	r2, fp
 80012b2:	9209      	str	r2, [sp, #36]	; 0x24
 80012b4:	f89a 3000 	ldrb.w	r3, [sl]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a2 	beq.w	8001402 <_vfiprintf_r+0x20e>
 80012be:	2300      	movs	r3, #0
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80012c8:	f10a 0a01 	add.w	sl, sl, #1
 80012cc:	9304      	str	r3, [sp, #16]
 80012ce:	9307      	str	r3, [sp, #28]
 80012d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012d4:	931a      	str	r3, [sp, #104]	; 0x68
 80012d6:	4654      	mov	r4, sl
 80012d8:	2205      	movs	r2, #5
 80012da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012de:	4858      	ldr	r0, [pc, #352]	; (8001440 <_vfiprintf_r+0x24c>)
 80012e0:	f7fe ff86 	bl	80001f0 <memchr>
 80012e4:	9a04      	ldr	r2, [sp, #16]
 80012e6:	b9d8      	cbnz	r0, 8001320 <_vfiprintf_r+0x12c>
 80012e8:	06d1      	lsls	r1, r2, #27
 80012ea:	bf44      	itt	mi
 80012ec:	2320      	movmi	r3, #32
 80012ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012f2:	0713      	lsls	r3, r2, #28
 80012f4:	bf44      	itt	mi
 80012f6:	232b      	movmi	r3, #43	; 0x2b
 80012f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001300:	2b2a      	cmp	r3, #42	; 0x2a
 8001302:	d015      	beq.n	8001330 <_vfiprintf_r+0x13c>
 8001304:	9a07      	ldr	r2, [sp, #28]
 8001306:	4654      	mov	r4, sl
 8001308:	2000      	movs	r0, #0
 800130a:	f04f 0c0a 	mov.w	ip, #10
 800130e:	4621      	mov	r1, r4
 8001310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001314:	3b30      	subs	r3, #48	; 0x30
 8001316:	2b09      	cmp	r3, #9
 8001318:	d94e      	bls.n	80013b8 <_vfiprintf_r+0x1c4>
 800131a:	b1b0      	cbz	r0, 800134a <_vfiprintf_r+0x156>
 800131c:	9207      	str	r2, [sp, #28]
 800131e:	e014      	b.n	800134a <_vfiprintf_r+0x156>
 8001320:	eba0 0308 	sub.w	r3, r0, r8
 8001324:	fa09 f303 	lsl.w	r3, r9, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	9304      	str	r3, [sp, #16]
 800132c:	46a2      	mov	sl, r4
 800132e:	e7d2      	b.n	80012d6 <_vfiprintf_r+0xe2>
 8001330:	9b03      	ldr	r3, [sp, #12]
 8001332:	1d19      	adds	r1, r3, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	9103      	str	r1, [sp, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	bfbb      	ittet	lt
 800133c:	425b      	neglt	r3, r3
 800133e:	f042 0202 	orrlt.w	r2, r2, #2
 8001342:	9307      	strge	r3, [sp, #28]
 8001344:	9307      	strlt	r3, [sp, #28]
 8001346:	bfb8      	it	lt
 8001348:	9204      	strlt	r2, [sp, #16]
 800134a:	7823      	ldrb	r3, [r4, #0]
 800134c:	2b2e      	cmp	r3, #46	; 0x2e
 800134e:	d10c      	bne.n	800136a <_vfiprintf_r+0x176>
 8001350:	7863      	ldrb	r3, [r4, #1]
 8001352:	2b2a      	cmp	r3, #42	; 0x2a
 8001354:	d135      	bne.n	80013c2 <_vfiprintf_r+0x1ce>
 8001356:	9b03      	ldr	r3, [sp, #12]
 8001358:	1d1a      	adds	r2, r3, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	9203      	str	r2, [sp, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	bfb8      	it	lt
 8001362:	f04f 33ff 	movlt.w	r3, #4294967295
 8001366:	3402      	adds	r4, #2
 8001368:	9305      	str	r3, [sp, #20]
 800136a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001450 <_vfiprintf_r+0x25c>
 800136e:	7821      	ldrb	r1, [r4, #0]
 8001370:	2203      	movs	r2, #3
 8001372:	4650      	mov	r0, sl
 8001374:	f7fe ff3c 	bl	80001f0 <memchr>
 8001378:	b140      	cbz	r0, 800138c <_vfiprintf_r+0x198>
 800137a:	2340      	movs	r3, #64	; 0x40
 800137c:	eba0 000a 	sub.w	r0, r0, sl
 8001380:	fa03 f000 	lsl.w	r0, r3, r0
 8001384:	9b04      	ldr	r3, [sp, #16]
 8001386:	4303      	orrs	r3, r0
 8001388:	3401      	adds	r4, #1
 800138a:	9304      	str	r3, [sp, #16]
 800138c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <_vfiprintf_r+0x250>)
 8001392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001396:	2206      	movs	r2, #6
 8001398:	f7fe ff2a 	bl	80001f0 <memchr>
 800139c:	2800      	cmp	r0, #0
 800139e:	d03f      	beq.n	8001420 <_vfiprintf_r+0x22c>
 80013a0:	4b29      	ldr	r3, [pc, #164]	; (8001448 <_vfiprintf_r+0x254>)
 80013a2:	bb1b      	cbnz	r3, 80013ec <_vfiprintf_r+0x1f8>
 80013a4:	9b03      	ldr	r3, [sp, #12]
 80013a6:	3307      	adds	r3, #7
 80013a8:	f023 0307 	bic.w	r3, r3, #7
 80013ac:	3308      	adds	r3, #8
 80013ae:	9303      	str	r3, [sp, #12]
 80013b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013b2:	443b      	add	r3, r7
 80013b4:	9309      	str	r3, [sp, #36]	; 0x24
 80013b6:	e767      	b.n	8001288 <_vfiprintf_r+0x94>
 80013b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80013bc:	460c      	mov	r4, r1
 80013be:	2001      	movs	r0, #1
 80013c0:	e7a5      	b.n	800130e <_vfiprintf_r+0x11a>
 80013c2:	2300      	movs	r3, #0
 80013c4:	3401      	adds	r4, #1
 80013c6:	9305      	str	r3, [sp, #20]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 0c0a 	mov.w	ip, #10
 80013ce:	4620      	mov	r0, r4
 80013d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013d4:	3a30      	subs	r2, #48	; 0x30
 80013d6:	2a09      	cmp	r2, #9
 80013d8:	d903      	bls.n	80013e2 <_vfiprintf_r+0x1ee>
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0c5      	beq.n	800136a <_vfiprintf_r+0x176>
 80013de:	9105      	str	r1, [sp, #20]
 80013e0:	e7c3      	b.n	800136a <_vfiprintf_r+0x176>
 80013e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80013e6:	4604      	mov	r4, r0
 80013e8:	2301      	movs	r3, #1
 80013ea:	e7f0      	b.n	80013ce <_vfiprintf_r+0x1da>
 80013ec:	ab03      	add	r3, sp, #12
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	462a      	mov	r2, r5
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <_vfiprintf_r+0x258>)
 80013f4:	a904      	add	r1, sp, #16
 80013f6:	4630      	mov	r0, r6
 80013f8:	f3af 8000 	nop.w
 80013fc:	4607      	mov	r7, r0
 80013fe:	1c78      	adds	r0, r7, #1
 8001400:	d1d6      	bne.n	80013b0 <_vfiprintf_r+0x1bc>
 8001402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001404:	07d9      	lsls	r1, r3, #31
 8001406:	d405      	bmi.n	8001414 <_vfiprintf_r+0x220>
 8001408:	89ab      	ldrh	r3, [r5, #12]
 800140a:	059a      	lsls	r2, r3, #22
 800140c:	d402      	bmi.n	8001414 <_vfiprintf_r+0x220>
 800140e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001410:	f7ff fe31 	bl	8001076 <__retarget_lock_release_recursive>
 8001414:	89ab      	ldrh	r3, [r5, #12]
 8001416:	065b      	lsls	r3, r3, #25
 8001418:	f53f af12 	bmi.w	8001240 <_vfiprintf_r+0x4c>
 800141c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800141e:	e711      	b.n	8001244 <_vfiprintf_r+0x50>
 8001420:	ab03      	add	r3, sp, #12
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	462a      	mov	r2, r5
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <_vfiprintf_r+0x258>)
 8001428:	a904      	add	r1, sp, #16
 800142a:	4630      	mov	r0, r6
 800142c:	f000 f880 	bl	8001530 <_printf_i>
 8001430:	e7e4      	b.n	80013fc <_vfiprintf_r+0x208>
 8001432:	bf00      	nop
 8001434:	08001db8 	.word	0x08001db8
 8001438:	08001dd8 	.word	0x08001dd8
 800143c:	08001d98 	.word	0x08001d98
 8001440:	08001df8 	.word	0x08001df8
 8001444:	08001e02 	.word	0x08001e02
 8001448:	00000000 	.word	0x00000000
 800144c:	080011cf 	.word	0x080011cf
 8001450:	08001dfe 	.word	0x08001dfe

08001454 <_printf_common>:
 8001454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001458:	4616      	mov	r6, r2
 800145a:	4699      	mov	r9, r3
 800145c:	688a      	ldr	r2, [r1, #8]
 800145e:	690b      	ldr	r3, [r1, #16]
 8001460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001464:	4293      	cmp	r3, r2
 8001466:	bfb8      	it	lt
 8001468:	4613      	movlt	r3, r2
 800146a:	6033      	str	r3, [r6, #0]
 800146c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001470:	4607      	mov	r7, r0
 8001472:	460c      	mov	r4, r1
 8001474:	b10a      	cbz	r2, 800147a <_printf_common+0x26>
 8001476:	3301      	adds	r3, #1
 8001478:	6033      	str	r3, [r6, #0]
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	0699      	lsls	r1, r3, #26
 800147e:	bf42      	ittt	mi
 8001480:	6833      	ldrmi	r3, [r6, #0]
 8001482:	3302      	addmi	r3, #2
 8001484:	6033      	strmi	r3, [r6, #0]
 8001486:	6825      	ldr	r5, [r4, #0]
 8001488:	f015 0506 	ands.w	r5, r5, #6
 800148c:	d106      	bne.n	800149c <_printf_common+0x48>
 800148e:	f104 0a19 	add.w	sl, r4, #25
 8001492:	68e3      	ldr	r3, [r4, #12]
 8001494:	6832      	ldr	r2, [r6, #0]
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	42ab      	cmp	r3, r5
 800149a:	dc26      	bgt.n	80014ea <_printf_common+0x96>
 800149c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80014a0:	1e13      	subs	r3, r2, #0
 80014a2:	6822      	ldr	r2, [r4, #0]
 80014a4:	bf18      	it	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	0692      	lsls	r2, r2, #26
 80014aa:	d42b      	bmi.n	8001504 <_printf_common+0xb0>
 80014ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014b0:	4649      	mov	r1, r9
 80014b2:	4638      	mov	r0, r7
 80014b4:	47c0      	blx	r8
 80014b6:	3001      	adds	r0, #1
 80014b8:	d01e      	beq.n	80014f8 <_printf_common+0xa4>
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	68e5      	ldr	r5, [r4, #12]
 80014be:	6832      	ldr	r2, [r6, #0]
 80014c0:	f003 0306 	and.w	r3, r3, #6
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	bf08      	it	eq
 80014c8:	1aad      	subeq	r5, r5, r2
 80014ca:	68a3      	ldr	r3, [r4, #8]
 80014cc:	6922      	ldr	r2, [r4, #16]
 80014ce:	bf0c      	ite	eq
 80014d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014d4:	2500      	movne	r5, #0
 80014d6:	4293      	cmp	r3, r2
 80014d8:	bfc4      	itt	gt
 80014da:	1a9b      	subgt	r3, r3, r2
 80014dc:	18ed      	addgt	r5, r5, r3
 80014de:	2600      	movs	r6, #0
 80014e0:	341a      	adds	r4, #26
 80014e2:	42b5      	cmp	r5, r6
 80014e4:	d11a      	bne.n	800151c <_printf_common+0xc8>
 80014e6:	2000      	movs	r0, #0
 80014e8:	e008      	b.n	80014fc <_printf_common+0xa8>
 80014ea:	2301      	movs	r3, #1
 80014ec:	4652      	mov	r2, sl
 80014ee:	4649      	mov	r1, r9
 80014f0:	4638      	mov	r0, r7
 80014f2:	47c0      	blx	r8
 80014f4:	3001      	adds	r0, #1
 80014f6:	d103      	bne.n	8001500 <_printf_common+0xac>
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001500:	3501      	adds	r5, #1
 8001502:	e7c6      	b.n	8001492 <_printf_common+0x3e>
 8001504:	18e1      	adds	r1, r4, r3
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	2030      	movs	r0, #48	; 0x30
 800150a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800150e:	4422      	add	r2, r4
 8001510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001518:	3302      	adds	r3, #2
 800151a:	e7c7      	b.n	80014ac <_printf_common+0x58>
 800151c:	2301      	movs	r3, #1
 800151e:	4622      	mov	r2, r4
 8001520:	4649      	mov	r1, r9
 8001522:	4638      	mov	r0, r7
 8001524:	47c0      	blx	r8
 8001526:	3001      	adds	r0, #1
 8001528:	d0e6      	beq.n	80014f8 <_printf_common+0xa4>
 800152a:	3601      	adds	r6, #1
 800152c:	e7d9      	b.n	80014e2 <_printf_common+0x8e>
	...

08001530 <_printf_i>:
 8001530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001534:	7e0f      	ldrb	r7, [r1, #24]
 8001536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001538:	2f78      	cmp	r7, #120	; 0x78
 800153a:	4691      	mov	r9, r2
 800153c:	4680      	mov	r8, r0
 800153e:	460c      	mov	r4, r1
 8001540:	469a      	mov	sl, r3
 8001542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001546:	d807      	bhi.n	8001558 <_printf_i+0x28>
 8001548:	2f62      	cmp	r7, #98	; 0x62
 800154a:	d80a      	bhi.n	8001562 <_printf_i+0x32>
 800154c:	2f00      	cmp	r7, #0
 800154e:	f000 80d8 	beq.w	8001702 <_printf_i+0x1d2>
 8001552:	2f58      	cmp	r7, #88	; 0x58
 8001554:	f000 80a3 	beq.w	800169e <_printf_i+0x16e>
 8001558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800155c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001560:	e03a      	b.n	80015d8 <_printf_i+0xa8>
 8001562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001566:	2b15      	cmp	r3, #21
 8001568:	d8f6      	bhi.n	8001558 <_printf_i+0x28>
 800156a:	a101      	add	r1, pc, #4	; (adr r1, 8001570 <_printf_i+0x40>)
 800156c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001570:	080015c9 	.word	0x080015c9
 8001574:	080015dd 	.word	0x080015dd
 8001578:	08001559 	.word	0x08001559
 800157c:	08001559 	.word	0x08001559
 8001580:	08001559 	.word	0x08001559
 8001584:	08001559 	.word	0x08001559
 8001588:	080015dd 	.word	0x080015dd
 800158c:	08001559 	.word	0x08001559
 8001590:	08001559 	.word	0x08001559
 8001594:	08001559 	.word	0x08001559
 8001598:	08001559 	.word	0x08001559
 800159c:	080016e9 	.word	0x080016e9
 80015a0:	0800160d 	.word	0x0800160d
 80015a4:	080016cb 	.word	0x080016cb
 80015a8:	08001559 	.word	0x08001559
 80015ac:	08001559 	.word	0x08001559
 80015b0:	0800170b 	.word	0x0800170b
 80015b4:	08001559 	.word	0x08001559
 80015b8:	0800160d 	.word	0x0800160d
 80015bc:	08001559 	.word	0x08001559
 80015c0:	08001559 	.word	0x08001559
 80015c4:	080016d3 	.word	0x080016d3
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	1d1a      	adds	r2, r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	602a      	str	r2, [r5, #0]
 80015d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015d8:	2301      	movs	r3, #1
 80015da:	e0a3      	b.n	8001724 <_printf_i+0x1f4>
 80015dc:	6820      	ldr	r0, [r4, #0]
 80015de:	6829      	ldr	r1, [r5, #0]
 80015e0:	0606      	lsls	r6, r0, #24
 80015e2:	f101 0304 	add.w	r3, r1, #4
 80015e6:	d50a      	bpl.n	80015fe <_printf_i+0xce>
 80015e8:	680e      	ldr	r6, [r1, #0]
 80015ea:	602b      	str	r3, [r5, #0]
 80015ec:	2e00      	cmp	r6, #0
 80015ee:	da03      	bge.n	80015f8 <_printf_i+0xc8>
 80015f0:	232d      	movs	r3, #45	; 0x2d
 80015f2:	4276      	negs	r6, r6
 80015f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015f8:	485e      	ldr	r0, [pc, #376]	; (8001774 <_printf_i+0x244>)
 80015fa:	230a      	movs	r3, #10
 80015fc:	e019      	b.n	8001632 <_printf_i+0x102>
 80015fe:	680e      	ldr	r6, [r1, #0]
 8001600:	602b      	str	r3, [r5, #0]
 8001602:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001606:	bf18      	it	ne
 8001608:	b236      	sxthne	r6, r6
 800160a:	e7ef      	b.n	80015ec <_printf_i+0xbc>
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	6820      	ldr	r0, [r4, #0]
 8001610:	1d19      	adds	r1, r3, #4
 8001612:	6029      	str	r1, [r5, #0]
 8001614:	0601      	lsls	r1, r0, #24
 8001616:	d501      	bpl.n	800161c <_printf_i+0xec>
 8001618:	681e      	ldr	r6, [r3, #0]
 800161a:	e002      	b.n	8001622 <_printf_i+0xf2>
 800161c:	0646      	lsls	r6, r0, #25
 800161e:	d5fb      	bpl.n	8001618 <_printf_i+0xe8>
 8001620:	881e      	ldrh	r6, [r3, #0]
 8001622:	4854      	ldr	r0, [pc, #336]	; (8001774 <_printf_i+0x244>)
 8001624:	2f6f      	cmp	r7, #111	; 0x6f
 8001626:	bf0c      	ite	eq
 8001628:	2308      	moveq	r3, #8
 800162a:	230a      	movne	r3, #10
 800162c:	2100      	movs	r1, #0
 800162e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001632:	6865      	ldr	r5, [r4, #4]
 8001634:	60a5      	str	r5, [r4, #8]
 8001636:	2d00      	cmp	r5, #0
 8001638:	bfa2      	ittt	ge
 800163a:	6821      	ldrge	r1, [r4, #0]
 800163c:	f021 0104 	bicge.w	r1, r1, #4
 8001640:	6021      	strge	r1, [r4, #0]
 8001642:	b90e      	cbnz	r6, 8001648 <_printf_i+0x118>
 8001644:	2d00      	cmp	r5, #0
 8001646:	d04d      	beq.n	80016e4 <_printf_i+0x1b4>
 8001648:	4615      	mov	r5, r2
 800164a:	fbb6 f1f3 	udiv	r1, r6, r3
 800164e:	fb03 6711 	mls	r7, r3, r1, r6
 8001652:	5dc7      	ldrb	r7, [r0, r7]
 8001654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001658:	4637      	mov	r7, r6
 800165a:	42bb      	cmp	r3, r7
 800165c:	460e      	mov	r6, r1
 800165e:	d9f4      	bls.n	800164a <_printf_i+0x11a>
 8001660:	2b08      	cmp	r3, #8
 8001662:	d10b      	bne.n	800167c <_printf_i+0x14c>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	07de      	lsls	r6, r3, #31
 8001668:	d508      	bpl.n	800167c <_printf_i+0x14c>
 800166a:	6923      	ldr	r3, [r4, #16]
 800166c:	6861      	ldr	r1, [r4, #4]
 800166e:	4299      	cmp	r1, r3
 8001670:	bfde      	ittt	le
 8001672:	2330      	movle	r3, #48	; 0x30
 8001674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001678:	f105 35ff 	addle.w	r5, r5, #4294967295
 800167c:	1b52      	subs	r2, r2, r5
 800167e:	6122      	str	r2, [r4, #16]
 8001680:	f8cd a000 	str.w	sl, [sp]
 8001684:	464b      	mov	r3, r9
 8001686:	aa03      	add	r2, sp, #12
 8001688:	4621      	mov	r1, r4
 800168a:	4640      	mov	r0, r8
 800168c:	f7ff fee2 	bl	8001454 <_printf_common>
 8001690:	3001      	adds	r0, #1
 8001692:	d14c      	bne.n	800172e <_printf_i+0x1fe>
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	b004      	add	sp, #16
 800169a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800169e:	4835      	ldr	r0, [pc, #212]	; (8001774 <_printf_i+0x244>)
 80016a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80016a4:	6829      	ldr	r1, [r5, #0]
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80016ac:	6029      	str	r1, [r5, #0]
 80016ae:	061d      	lsls	r5, r3, #24
 80016b0:	d514      	bpl.n	80016dc <_printf_i+0x1ac>
 80016b2:	07df      	lsls	r7, r3, #31
 80016b4:	bf44      	itt	mi
 80016b6:	f043 0320 	orrmi.w	r3, r3, #32
 80016ba:	6023      	strmi	r3, [r4, #0]
 80016bc:	b91e      	cbnz	r6, 80016c6 <_printf_i+0x196>
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	f023 0320 	bic.w	r3, r3, #32
 80016c4:	6023      	str	r3, [r4, #0]
 80016c6:	2310      	movs	r3, #16
 80016c8:	e7b0      	b.n	800162c <_printf_i+0xfc>
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	2378      	movs	r3, #120	; 0x78
 80016d4:	4828      	ldr	r0, [pc, #160]	; (8001778 <_printf_i+0x248>)
 80016d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80016da:	e7e3      	b.n	80016a4 <_printf_i+0x174>
 80016dc:	0659      	lsls	r1, r3, #25
 80016de:	bf48      	it	mi
 80016e0:	b2b6      	uxthmi	r6, r6
 80016e2:	e7e6      	b.n	80016b2 <_printf_i+0x182>
 80016e4:	4615      	mov	r5, r2
 80016e6:	e7bb      	b.n	8001660 <_printf_i+0x130>
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	6826      	ldr	r6, [r4, #0]
 80016ec:	6961      	ldr	r1, [r4, #20]
 80016ee:	1d18      	adds	r0, r3, #4
 80016f0:	6028      	str	r0, [r5, #0]
 80016f2:	0635      	lsls	r5, r6, #24
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	d501      	bpl.n	80016fc <_printf_i+0x1cc>
 80016f8:	6019      	str	r1, [r3, #0]
 80016fa:	e002      	b.n	8001702 <_printf_i+0x1d2>
 80016fc:	0670      	lsls	r0, r6, #25
 80016fe:	d5fb      	bpl.n	80016f8 <_printf_i+0x1c8>
 8001700:	8019      	strh	r1, [r3, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	6123      	str	r3, [r4, #16]
 8001706:	4615      	mov	r5, r2
 8001708:	e7ba      	b.n	8001680 <_printf_i+0x150>
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	1d1a      	adds	r2, r3, #4
 800170e:	602a      	str	r2, [r5, #0]
 8001710:	681d      	ldr	r5, [r3, #0]
 8001712:	6862      	ldr	r2, [r4, #4]
 8001714:	2100      	movs	r1, #0
 8001716:	4628      	mov	r0, r5
 8001718:	f7fe fd6a 	bl	80001f0 <memchr>
 800171c:	b108      	cbz	r0, 8001722 <_printf_i+0x1f2>
 800171e:	1b40      	subs	r0, r0, r5
 8001720:	6060      	str	r0, [r4, #4]
 8001722:	6863      	ldr	r3, [r4, #4]
 8001724:	6123      	str	r3, [r4, #16]
 8001726:	2300      	movs	r3, #0
 8001728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800172c:	e7a8      	b.n	8001680 <_printf_i+0x150>
 800172e:	6923      	ldr	r3, [r4, #16]
 8001730:	462a      	mov	r2, r5
 8001732:	4649      	mov	r1, r9
 8001734:	4640      	mov	r0, r8
 8001736:	47d0      	blx	sl
 8001738:	3001      	adds	r0, #1
 800173a:	d0ab      	beq.n	8001694 <_printf_i+0x164>
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	079b      	lsls	r3, r3, #30
 8001740:	d413      	bmi.n	800176a <_printf_i+0x23a>
 8001742:	68e0      	ldr	r0, [r4, #12]
 8001744:	9b03      	ldr	r3, [sp, #12]
 8001746:	4298      	cmp	r0, r3
 8001748:	bfb8      	it	lt
 800174a:	4618      	movlt	r0, r3
 800174c:	e7a4      	b.n	8001698 <_printf_i+0x168>
 800174e:	2301      	movs	r3, #1
 8001750:	4632      	mov	r2, r6
 8001752:	4649      	mov	r1, r9
 8001754:	4640      	mov	r0, r8
 8001756:	47d0      	blx	sl
 8001758:	3001      	adds	r0, #1
 800175a:	d09b      	beq.n	8001694 <_printf_i+0x164>
 800175c:	3501      	adds	r5, #1
 800175e:	68e3      	ldr	r3, [r4, #12]
 8001760:	9903      	ldr	r1, [sp, #12]
 8001762:	1a5b      	subs	r3, r3, r1
 8001764:	42ab      	cmp	r3, r5
 8001766:	dcf2      	bgt.n	800174e <_printf_i+0x21e>
 8001768:	e7eb      	b.n	8001742 <_printf_i+0x212>
 800176a:	2500      	movs	r5, #0
 800176c:	f104 0619 	add.w	r6, r4, #25
 8001770:	e7f5      	b.n	800175e <_printf_i+0x22e>
 8001772:	bf00      	nop
 8001774:	08001e09 	.word	0x08001e09
 8001778:	08001e1a 	.word	0x08001e1a

0800177c <_sbrk_r>:
 800177c:	b538      	push	{r3, r4, r5, lr}
 800177e:	4d06      	ldr	r5, [pc, #24]	; (8001798 <_sbrk_r+0x1c>)
 8001780:	2300      	movs	r3, #0
 8001782:	4604      	mov	r4, r0
 8001784:	4608      	mov	r0, r1
 8001786:	602b      	str	r3, [r5, #0]
 8001788:	f7ff fad4 	bl	8000d34 <_sbrk>
 800178c:	1c43      	adds	r3, r0, #1
 800178e:	d102      	bne.n	8001796 <_sbrk_r+0x1a>
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	b103      	cbz	r3, 8001796 <_sbrk_r+0x1a>
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	bd38      	pop	{r3, r4, r5, pc}
 8001798:	200000bc 	.word	0x200000bc

0800179c <__sread>:
 800179c:	b510      	push	{r4, lr}
 800179e:	460c      	mov	r4, r1
 80017a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a4:	f000 fab2 	bl	8001d0c <_read_r>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	bfab      	itete	ge
 80017ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80017ae:	89a3      	ldrhlt	r3, [r4, #12]
 80017b0:	181b      	addge	r3, r3, r0
 80017b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017b6:	bfac      	ite	ge
 80017b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80017ba:	81a3      	strhlt	r3, [r4, #12]
 80017bc:	bd10      	pop	{r4, pc}

080017be <__swrite>:
 80017be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c2:	461f      	mov	r7, r3
 80017c4:	898b      	ldrh	r3, [r1, #12]
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	4605      	mov	r5, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4616      	mov	r6, r2
 80017ce:	d505      	bpl.n	80017dc <__swrite+0x1e>
 80017d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d4:	2302      	movs	r3, #2
 80017d6:	2200      	movs	r2, #0
 80017d8:	f000 f9c8 	bl	8001b6c <_lseek_r>
 80017dc:	89a3      	ldrh	r3, [r4, #12]
 80017de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e6:	81a3      	strh	r3, [r4, #12]
 80017e8:	4632      	mov	r2, r6
 80017ea:	463b      	mov	r3, r7
 80017ec:	4628      	mov	r0, r5
 80017ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017f2:	f000 b869 	b.w	80018c8 <_write_r>

080017f6 <__sseek>:
 80017f6:	b510      	push	{r4, lr}
 80017f8:	460c      	mov	r4, r1
 80017fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017fe:	f000 f9b5 	bl	8001b6c <_lseek_r>
 8001802:	1c43      	adds	r3, r0, #1
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	bf15      	itete	ne
 8001808:	6560      	strne	r0, [r4, #84]	; 0x54
 800180a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800180e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001812:	81a3      	strheq	r3, [r4, #12]
 8001814:	bf18      	it	ne
 8001816:	81a3      	strhne	r3, [r4, #12]
 8001818:	bd10      	pop	{r4, pc}

0800181a <__sclose>:
 800181a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800181e:	f000 b8d3 	b.w	80019c8 <_close_r>
	...

08001824 <__swbuf_r>:
 8001824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001826:	460e      	mov	r6, r1
 8001828:	4614      	mov	r4, r2
 800182a:	4605      	mov	r5, r0
 800182c:	b118      	cbz	r0, 8001836 <__swbuf_r+0x12>
 800182e:	6983      	ldr	r3, [r0, #24]
 8001830:	b90b      	cbnz	r3, 8001836 <__swbuf_r+0x12>
 8001832:	f7ff fb81 	bl	8000f38 <__sinit>
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <__swbuf_r+0x98>)
 8001838:	429c      	cmp	r4, r3
 800183a:	d12b      	bne.n	8001894 <__swbuf_r+0x70>
 800183c:	686c      	ldr	r4, [r5, #4]
 800183e:	69a3      	ldr	r3, [r4, #24]
 8001840:	60a3      	str	r3, [r4, #8]
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	071a      	lsls	r2, r3, #28
 8001846:	d52f      	bpl.n	80018a8 <__swbuf_r+0x84>
 8001848:	6923      	ldr	r3, [r4, #16]
 800184a:	b36b      	cbz	r3, 80018a8 <__swbuf_r+0x84>
 800184c:	6923      	ldr	r3, [r4, #16]
 800184e:	6820      	ldr	r0, [r4, #0]
 8001850:	1ac0      	subs	r0, r0, r3
 8001852:	6963      	ldr	r3, [r4, #20]
 8001854:	b2f6      	uxtb	r6, r6
 8001856:	4283      	cmp	r3, r0
 8001858:	4637      	mov	r7, r6
 800185a:	dc04      	bgt.n	8001866 <__swbuf_r+0x42>
 800185c:	4621      	mov	r1, r4
 800185e:	4628      	mov	r0, r5
 8001860:	f000 f948 	bl	8001af4 <_fflush_r>
 8001864:	bb30      	cbnz	r0, 80018b4 <__swbuf_r+0x90>
 8001866:	68a3      	ldr	r3, [r4, #8]
 8001868:	3b01      	subs	r3, #1
 800186a:	60a3      	str	r3, [r4, #8]
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	6022      	str	r2, [r4, #0]
 8001872:	701e      	strb	r6, [r3, #0]
 8001874:	6963      	ldr	r3, [r4, #20]
 8001876:	3001      	adds	r0, #1
 8001878:	4283      	cmp	r3, r0
 800187a:	d004      	beq.n	8001886 <__swbuf_r+0x62>
 800187c:	89a3      	ldrh	r3, [r4, #12]
 800187e:	07db      	lsls	r3, r3, #31
 8001880:	d506      	bpl.n	8001890 <__swbuf_r+0x6c>
 8001882:	2e0a      	cmp	r6, #10
 8001884:	d104      	bne.n	8001890 <__swbuf_r+0x6c>
 8001886:	4621      	mov	r1, r4
 8001888:	4628      	mov	r0, r5
 800188a:	f000 f933 	bl	8001af4 <_fflush_r>
 800188e:	b988      	cbnz	r0, 80018b4 <__swbuf_r+0x90>
 8001890:	4638      	mov	r0, r7
 8001892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <__swbuf_r+0x9c>)
 8001896:	429c      	cmp	r4, r3
 8001898:	d101      	bne.n	800189e <__swbuf_r+0x7a>
 800189a:	68ac      	ldr	r4, [r5, #8]
 800189c:	e7cf      	b.n	800183e <__swbuf_r+0x1a>
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <__swbuf_r+0xa0>)
 80018a0:	429c      	cmp	r4, r3
 80018a2:	bf08      	it	eq
 80018a4:	68ec      	ldreq	r4, [r5, #12]
 80018a6:	e7ca      	b.n	800183e <__swbuf_r+0x1a>
 80018a8:	4621      	mov	r1, r4
 80018aa:	4628      	mov	r0, r5
 80018ac:	f000 f81e 	bl	80018ec <__swsetup_r>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d0cb      	beq.n	800184c <__swbuf_r+0x28>
 80018b4:	f04f 37ff 	mov.w	r7, #4294967295
 80018b8:	e7ea      	b.n	8001890 <__swbuf_r+0x6c>
 80018ba:	bf00      	nop
 80018bc:	08001db8 	.word	0x08001db8
 80018c0:	08001dd8 	.word	0x08001dd8
 80018c4:	08001d98 	.word	0x08001d98

080018c8 <_write_r>:
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4d07      	ldr	r5, [pc, #28]	; (80018e8 <_write_r+0x20>)
 80018cc:	4604      	mov	r4, r0
 80018ce:	4608      	mov	r0, r1
 80018d0:	4611      	mov	r1, r2
 80018d2:	2200      	movs	r2, #0
 80018d4:	602a      	str	r2, [r5, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	f7ff f9db 	bl	8000c92 <_write>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d102      	bne.n	80018e6 <_write_r+0x1e>
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	b103      	cbz	r3, 80018e6 <_write_r+0x1e>
 80018e4:	6023      	str	r3, [r4, #0]
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	200000bc 	.word	0x200000bc

080018ec <__swsetup_r>:
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <__swsetup_r+0xcc>)
 80018ee:	b570      	push	{r4, r5, r6, lr}
 80018f0:	681d      	ldr	r5, [r3, #0]
 80018f2:	4606      	mov	r6, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	b125      	cbz	r5, 8001902 <__swsetup_r+0x16>
 80018f8:	69ab      	ldr	r3, [r5, #24]
 80018fa:	b913      	cbnz	r3, 8001902 <__swsetup_r+0x16>
 80018fc:	4628      	mov	r0, r5
 80018fe:	f7ff fb1b 	bl	8000f38 <__sinit>
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <__swsetup_r+0xd0>)
 8001904:	429c      	cmp	r4, r3
 8001906:	d10f      	bne.n	8001928 <__swsetup_r+0x3c>
 8001908:	686c      	ldr	r4, [r5, #4]
 800190a:	89a3      	ldrh	r3, [r4, #12]
 800190c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001910:	0719      	lsls	r1, r3, #28
 8001912:	d42c      	bmi.n	800196e <__swsetup_r+0x82>
 8001914:	06dd      	lsls	r5, r3, #27
 8001916:	d411      	bmi.n	800193c <__swsetup_r+0x50>
 8001918:	2309      	movs	r3, #9
 800191a:	6033      	str	r3, [r6, #0]
 800191c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001920:	81a3      	strh	r3, [r4, #12]
 8001922:	f04f 30ff 	mov.w	r0, #4294967295
 8001926:	e03e      	b.n	80019a6 <__swsetup_r+0xba>
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <__swsetup_r+0xd4>)
 800192a:	429c      	cmp	r4, r3
 800192c:	d101      	bne.n	8001932 <__swsetup_r+0x46>
 800192e:	68ac      	ldr	r4, [r5, #8]
 8001930:	e7eb      	b.n	800190a <__swsetup_r+0x1e>
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <__swsetup_r+0xd8>)
 8001934:	429c      	cmp	r4, r3
 8001936:	bf08      	it	eq
 8001938:	68ec      	ldreq	r4, [r5, #12]
 800193a:	e7e6      	b.n	800190a <__swsetup_r+0x1e>
 800193c:	0758      	lsls	r0, r3, #29
 800193e:	d512      	bpl.n	8001966 <__swsetup_r+0x7a>
 8001940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001942:	b141      	cbz	r1, 8001956 <__swsetup_r+0x6a>
 8001944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001948:	4299      	cmp	r1, r3
 800194a:	d002      	beq.n	8001952 <__swsetup_r+0x66>
 800194c:	4630      	mov	r0, r6
 800194e:	f000 f991 	bl	8001c74 <_free_r>
 8001952:	2300      	movs	r3, #0
 8001954:	6363      	str	r3, [r4, #52]	; 0x34
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	2300      	movs	r3, #0
 8001960:	6063      	str	r3, [r4, #4]
 8001962:	6923      	ldr	r3, [r4, #16]
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	89a3      	ldrh	r3, [r4, #12]
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	81a3      	strh	r3, [r4, #12]
 800196e:	6923      	ldr	r3, [r4, #16]
 8001970:	b94b      	cbnz	r3, 8001986 <__swsetup_r+0x9a>
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197c:	d003      	beq.n	8001986 <__swsetup_r+0x9a>
 800197e:	4621      	mov	r1, r4
 8001980:	4630      	mov	r0, r6
 8001982:	f000 f92b 	bl	8001bdc <__smakebuf_r>
 8001986:	89a0      	ldrh	r0, [r4, #12]
 8001988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800198c:	f010 0301 	ands.w	r3, r0, #1
 8001990:	d00a      	beq.n	80019a8 <__swsetup_r+0xbc>
 8001992:	2300      	movs	r3, #0
 8001994:	60a3      	str	r3, [r4, #8]
 8001996:	6963      	ldr	r3, [r4, #20]
 8001998:	425b      	negs	r3, r3
 800199a:	61a3      	str	r3, [r4, #24]
 800199c:	6923      	ldr	r3, [r4, #16]
 800199e:	b943      	cbnz	r3, 80019b2 <__swsetup_r+0xc6>
 80019a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019a4:	d1ba      	bne.n	800191c <__swsetup_r+0x30>
 80019a6:	bd70      	pop	{r4, r5, r6, pc}
 80019a8:	0781      	lsls	r1, r0, #30
 80019aa:	bf58      	it	pl
 80019ac:	6963      	ldrpl	r3, [r4, #20]
 80019ae:	60a3      	str	r3, [r4, #8]
 80019b0:	e7f4      	b.n	800199c <__swsetup_r+0xb0>
 80019b2:	2000      	movs	r0, #0
 80019b4:	e7f7      	b.n	80019a6 <__swsetup_r+0xba>
 80019b6:	bf00      	nop
 80019b8:	20000018 	.word	0x20000018
 80019bc:	08001db8 	.word	0x08001db8
 80019c0:	08001dd8 	.word	0x08001dd8
 80019c4:	08001d98 	.word	0x08001d98

080019c8 <_close_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4d06      	ldr	r5, [pc, #24]	; (80019e4 <_close_r+0x1c>)
 80019cc:	2300      	movs	r3, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	602b      	str	r3, [r5, #0]
 80019d4:	f7ff f979 	bl	8000cca <_close>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	d102      	bne.n	80019e2 <_close_r+0x1a>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b103      	cbz	r3, 80019e2 <_close_r+0x1a>
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	200000bc 	.word	0x200000bc

080019e8 <__sflush_r>:
 80019e8:	898a      	ldrh	r2, [r1, #12]
 80019ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019ee:	4605      	mov	r5, r0
 80019f0:	0710      	lsls	r0, r2, #28
 80019f2:	460c      	mov	r4, r1
 80019f4:	d458      	bmi.n	8001aa8 <__sflush_r+0xc0>
 80019f6:	684b      	ldr	r3, [r1, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dc05      	bgt.n	8001a08 <__sflush_r+0x20>
 80019fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	dc02      	bgt.n	8001a08 <__sflush_r+0x20>
 8001a02:	2000      	movs	r0, #0
 8001a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a0a:	2e00      	cmp	r6, #0
 8001a0c:	d0f9      	beq.n	8001a02 <__sflush_r+0x1a>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a14:	682f      	ldr	r7, [r5, #0]
 8001a16:	602b      	str	r3, [r5, #0]
 8001a18:	d032      	beq.n	8001a80 <__sflush_r+0x98>
 8001a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a1c:	89a3      	ldrh	r3, [r4, #12]
 8001a1e:	075a      	lsls	r2, r3, #29
 8001a20:	d505      	bpl.n	8001a2e <__sflush_r+0x46>
 8001a22:	6863      	ldr	r3, [r4, #4]
 8001a24:	1ac0      	subs	r0, r0, r3
 8001a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a28:	b10b      	cbz	r3, 8001a2e <__sflush_r+0x46>
 8001a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a2c:	1ac0      	subs	r0, r0, r3
 8001a2e:	2300      	movs	r3, #0
 8001a30:	4602      	mov	r2, r0
 8001a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a34:	6a21      	ldr	r1, [r4, #32]
 8001a36:	4628      	mov	r0, r5
 8001a38:	47b0      	blx	r6
 8001a3a:	1c43      	adds	r3, r0, #1
 8001a3c:	89a3      	ldrh	r3, [r4, #12]
 8001a3e:	d106      	bne.n	8001a4e <__sflush_r+0x66>
 8001a40:	6829      	ldr	r1, [r5, #0]
 8001a42:	291d      	cmp	r1, #29
 8001a44:	d82c      	bhi.n	8001aa0 <__sflush_r+0xb8>
 8001a46:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <__sflush_r+0x108>)
 8001a48:	40ca      	lsrs	r2, r1
 8001a4a:	07d6      	lsls	r6, r2, #31
 8001a4c:	d528      	bpl.n	8001aa0 <__sflush_r+0xb8>
 8001a4e:	2200      	movs	r2, #0
 8001a50:	6062      	str	r2, [r4, #4]
 8001a52:	04d9      	lsls	r1, r3, #19
 8001a54:	6922      	ldr	r2, [r4, #16]
 8001a56:	6022      	str	r2, [r4, #0]
 8001a58:	d504      	bpl.n	8001a64 <__sflush_r+0x7c>
 8001a5a:	1c42      	adds	r2, r0, #1
 8001a5c:	d101      	bne.n	8001a62 <__sflush_r+0x7a>
 8001a5e:	682b      	ldr	r3, [r5, #0]
 8001a60:	b903      	cbnz	r3, 8001a64 <__sflush_r+0x7c>
 8001a62:	6560      	str	r0, [r4, #84]	; 0x54
 8001a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a66:	602f      	str	r7, [r5, #0]
 8001a68:	2900      	cmp	r1, #0
 8001a6a:	d0ca      	beq.n	8001a02 <__sflush_r+0x1a>
 8001a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a70:	4299      	cmp	r1, r3
 8001a72:	d002      	beq.n	8001a7a <__sflush_r+0x92>
 8001a74:	4628      	mov	r0, r5
 8001a76:	f000 f8fd 	bl	8001c74 <_free_r>
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8001a7e:	e7c1      	b.n	8001a04 <__sflush_r+0x1c>
 8001a80:	6a21      	ldr	r1, [r4, #32]
 8001a82:	2301      	movs	r3, #1
 8001a84:	4628      	mov	r0, r5
 8001a86:	47b0      	blx	r6
 8001a88:	1c41      	adds	r1, r0, #1
 8001a8a:	d1c7      	bne.n	8001a1c <__sflush_r+0x34>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0c4      	beq.n	8001a1c <__sflush_r+0x34>
 8001a92:	2b1d      	cmp	r3, #29
 8001a94:	d001      	beq.n	8001a9a <__sflush_r+0xb2>
 8001a96:	2b16      	cmp	r3, #22
 8001a98:	d101      	bne.n	8001a9e <__sflush_r+0xb6>
 8001a9a:	602f      	str	r7, [r5, #0]
 8001a9c:	e7b1      	b.n	8001a02 <__sflush_r+0x1a>
 8001a9e:	89a3      	ldrh	r3, [r4, #12]
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa4:	81a3      	strh	r3, [r4, #12]
 8001aa6:	e7ad      	b.n	8001a04 <__sflush_r+0x1c>
 8001aa8:	690f      	ldr	r7, [r1, #16]
 8001aaa:	2f00      	cmp	r7, #0
 8001aac:	d0a9      	beq.n	8001a02 <__sflush_r+0x1a>
 8001aae:	0793      	lsls	r3, r2, #30
 8001ab0:	680e      	ldr	r6, [r1, #0]
 8001ab2:	bf08      	it	eq
 8001ab4:	694b      	ldreq	r3, [r1, #20]
 8001ab6:	600f      	str	r7, [r1, #0]
 8001ab8:	bf18      	it	ne
 8001aba:	2300      	movne	r3, #0
 8001abc:	eba6 0807 	sub.w	r8, r6, r7
 8001ac0:	608b      	str	r3, [r1, #8]
 8001ac2:	f1b8 0f00 	cmp.w	r8, #0
 8001ac6:	dd9c      	ble.n	8001a02 <__sflush_r+0x1a>
 8001ac8:	6a21      	ldr	r1, [r4, #32]
 8001aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001acc:	4643      	mov	r3, r8
 8001ace:	463a      	mov	r2, r7
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	47b0      	blx	r6
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	dc06      	bgt.n	8001ae6 <__sflush_r+0xfe>
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ade:	81a3      	strh	r3, [r4, #12]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	e78e      	b.n	8001a04 <__sflush_r+0x1c>
 8001ae6:	4407      	add	r7, r0
 8001ae8:	eba8 0800 	sub.w	r8, r8, r0
 8001aec:	e7e9      	b.n	8001ac2 <__sflush_r+0xda>
 8001aee:	bf00      	nop
 8001af0:	20400001 	.word	0x20400001

08001af4 <_fflush_r>:
 8001af4:	b538      	push	{r3, r4, r5, lr}
 8001af6:	690b      	ldr	r3, [r1, #16]
 8001af8:	4605      	mov	r5, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	b913      	cbnz	r3, 8001b04 <_fflush_r+0x10>
 8001afe:	2500      	movs	r5, #0
 8001b00:	4628      	mov	r0, r5
 8001b02:	bd38      	pop	{r3, r4, r5, pc}
 8001b04:	b118      	cbz	r0, 8001b0e <_fflush_r+0x1a>
 8001b06:	6983      	ldr	r3, [r0, #24]
 8001b08:	b90b      	cbnz	r3, 8001b0e <_fflush_r+0x1a>
 8001b0a:	f7ff fa15 	bl	8000f38 <__sinit>
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <_fflush_r+0x6c>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	d11b      	bne.n	8001b4c <_fflush_r+0x58>
 8001b14:	686c      	ldr	r4, [r5, #4]
 8001b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0ef      	beq.n	8001afe <_fflush_r+0xa>
 8001b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b20:	07d0      	lsls	r0, r2, #31
 8001b22:	d404      	bmi.n	8001b2e <_fflush_r+0x3a>
 8001b24:	0599      	lsls	r1, r3, #22
 8001b26:	d402      	bmi.n	8001b2e <_fflush_r+0x3a>
 8001b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b2a:	f7ff faa3 	bl	8001074 <__retarget_lock_acquire_recursive>
 8001b2e:	4628      	mov	r0, r5
 8001b30:	4621      	mov	r1, r4
 8001b32:	f7ff ff59 	bl	80019e8 <__sflush_r>
 8001b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b38:	07da      	lsls	r2, r3, #31
 8001b3a:	4605      	mov	r5, r0
 8001b3c:	d4e0      	bmi.n	8001b00 <_fflush_r+0xc>
 8001b3e:	89a3      	ldrh	r3, [r4, #12]
 8001b40:	059b      	lsls	r3, r3, #22
 8001b42:	d4dd      	bmi.n	8001b00 <_fflush_r+0xc>
 8001b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b46:	f7ff fa96 	bl	8001076 <__retarget_lock_release_recursive>
 8001b4a:	e7d9      	b.n	8001b00 <_fflush_r+0xc>
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <_fflush_r+0x70>)
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	d101      	bne.n	8001b56 <_fflush_r+0x62>
 8001b52:	68ac      	ldr	r4, [r5, #8]
 8001b54:	e7df      	b.n	8001b16 <_fflush_r+0x22>
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <_fflush_r+0x74>)
 8001b58:	429c      	cmp	r4, r3
 8001b5a:	bf08      	it	eq
 8001b5c:	68ec      	ldreq	r4, [r5, #12]
 8001b5e:	e7da      	b.n	8001b16 <_fflush_r+0x22>
 8001b60:	08001db8 	.word	0x08001db8
 8001b64:	08001dd8 	.word	0x08001dd8
 8001b68:	08001d98 	.word	0x08001d98

08001b6c <_lseek_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4d07      	ldr	r5, [pc, #28]	; (8001b8c <_lseek_r+0x20>)
 8001b70:	4604      	mov	r4, r0
 8001b72:	4608      	mov	r0, r1
 8001b74:	4611      	mov	r1, r2
 8001b76:	2200      	movs	r2, #0
 8001b78:	602a      	str	r2, [r5, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff f8cc 	bl	8000d18 <_lseek>
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	d102      	bne.n	8001b8a <_lseek_r+0x1e>
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	b103      	cbz	r3, 8001b8a <_lseek_r+0x1e>
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	200000bc 	.word	0x200000bc

08001b90 <__swhatbuf_r>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	460e      	mov	r6, r1
 8001b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b98:	2900      	cmp	r1, #0
 8001b9a:	b096      	sub	sp, #88	; 0x58
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	da08      	bge.n	8001bb4 <__swhatbuf_r+0x24>
 8001ba2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	602a      	str	r2, [r5, #0]
 8001baa:	061a      	lsls	r2, r3, #24
 8001bac:	d410      	bmi.n	8001bd0 <__swhatbuf_r+0x40>
 8001bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb2:	e00e      	b.n	8001bd2 <__swhatbuf_r+0x42>
 8001bb4:	466a      	mov	r2, sp
 8001bb6:	f000 f8bb 	bl	8001d30 <_fstat_r>
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	dbf1      	blt.n	8001ba2 <__swhatbuf_r+0x12>
 8001bbe:	9a01      	ldr	r2, [sp, #4]
 8001bc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001bc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001bc8:	425a      	negs	r2, r3
 8001bca:	415a      	adcs	r2, r3
 8001bcc:	602a      	str	r2, [r5, #0]
 8001bce:	e7ee      	b.n	8001bae <__swhatbuf_r+0x1e>
 8001bd0:	2340      	movs	r3, #64	; 0x40
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	b016      	add	sp, #88	; 0x58
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001bdc <__smakebuf_r>:
 8001bdc:	898b      	ldrh	r3, [r1, #12]
 8001bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001be0:	079d      	lsls	r5, r3, #30
 8001be2:	4606      	mov	r6, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	d507      	bpl.n	8001bf8 <__smakebuf_r+0x1c>
 8001be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001bec:	6023      	str	r3, [r4, #0]
 8001bee:	6123      	str	r3, [r4, #16]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	6163      	str	r3, [r4, #20]
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
 8001bf8:	ab01      	add	r3, sp, #4
 8001bfa:	466a      	mov	r2, sp
 8001bfc:	f7ff ffc8 	bl	8001b90 <__swhatbuf_r>
 8001c00:	9900      	ldr	r1, [sp, #0]
 8001c02:	4605      	mov	r5, r0
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff fa57 	bl	80010b8 <_malloc_r>
 8001c0a:	b948      	cbnz	r0, 8001c20 <__smakebuf_r+0x44>
 8001c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c10:	059a      	lsls	r2, r3, #22
 8001c12:	d4ef      	bmi.n	8001bf4 <__smakebuf_r+0x18>
 8001c14:	f023 0303 	bic.w	r3, r3, #3
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	81a3      	strh	r3, [r4, #12]
 8001c1e:	e7e3      	b.n	8001be8 <__smakebuf_r+0xc>
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <__smakebuf_r+0x7c>)
 8001c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c24:	89a3      	ldrh	r3, [r4, #12]
 8001c26:	6020      	str	r0, [r4, #0]
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	81a3      	strh	r3, [r4, #12]
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	6163      	str	r3, [r4, #20]
 8001c32:	9b01      	ldr	r3, [sp, #4]
 8001c34:	6120      	str	r0, [r4, #16]
 8001c36:	b15b      	cbz	r3, 8001c50 <__smakebuf_r+0x74>
 8001c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f000 f889 	bl	8001d54 <_isatty_r>
 8001c42:	b128      	cbz	r0, 8001c50 <__smakebuf_r+0x74>
 8001c44:	89a3      	ldrh	r3, [r4, #12]
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	81a3      	strh	r3, [r4, #12]
 8001c50:	89a0      	ldrh	r0, [r4, #12]
 8001c52:	4305      	orrs	r5, r0
 8001c54:	81a5      	strh	r5, [r4, #12]
 8001c56:	e7cd      	b.n	8001bf4 <__smakebuf_r+0x18>
 8001c58:	08000ed1 	.word	0x08000ed1

08001c5c <__malloc_lock>:
 8001c5c:	4801      	ldr	r0, [pc, #4]	; (8001c64 <__malloc_lock+0x8>)
 8001c5e:	f7ff ba09 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8001c62:	bf00      	nop
 8001c64:	200000b0 	.word	0x200000b0

08001c68 <__malloc_unlock>:
 8001c68:	4801      	ldr	r0, [pc, #4]	; (8001c70 <__malloc_unlock+0x8>)
 8001c6a:	f7ff ba04 	b.w	8001076 <__retarget_lock_release_recursive>
 8001c6e:	bf00      	nop
 8001c70:	200000b0 	.word	0x200000b0

08001c74 <_free_r>:
 8001c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c76:	2900      	cmp	r1, #0
 8001c78:	d044      	beq.n	8001d04 <_free_r+0x90>
 8001c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c7e:	9001      	str	r0, [sp, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f1a1 0404 	sub.w	r4, r1, #4
 8001c86:	bfb8      	it	lt
 8001c88:	18e4      	addlt	r4, r4, r3
 8001c8a:	f7ff ffe7 	bl	8001c5c <__malloc_lock>
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <_free_r+0x94>)
 8001c90:	9801      	ldr	r0, [sp, #4]
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	b933      	cbnz	r3, 8001ca4 <_free_r+0x30>
 8001c96:	6063      	str	r3, [r4, #4]
 8001c98:	6014      	str	r4, [r2, #0]
 8001c9a:	b003      	add	sp, #12
 8001c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ca0:	f7ff bfe2 	b.w	8001c68 <__malloc_unlock>
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	d908      	bls.n	8001cba <_free_r+0x46>
 8001ca8:	6825      	ldr	r5, [r4, #0]
 8001caa:	1961      	adds	r1, r4, r5
 8001cac:	428b      	cmp	r3, r1
 8001cae:	bf01      	itttt	eq
 8001cb0:	6819      	ldreq	r1, [r3, #0]
 8001cb2:	685b      	ldreq	r3, [r3, #4]
 8001cb4:	1949      	addeq	r1, r1, r5
 8001cb6:	6021      	streq	r1, [r4, #0]
 8001cb8:	e7ed      	b.n	8001c96 <_free_r+0x22>
 8001cba:	461a      	mov	r2, r3
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	b10b      	cbz	r3, 8001cc4 <_free_r+0x50>
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d9fa      	bls.n	8001cba <_free_r+0x46>
 8001cc4:	6811      	ldr	r1, [r2, #0]
 8001cc6:	1855      	adds	r5, r2, r1
 8001cc8:	42a5      	cmp	r5, r4
 8001cca:	d10b      	bne.n	8001ce4 <_free_r+0x70>
 8001ccc:	6824      	ldr	r4, [r4, #0]
 8001cce:	4421      	add	r1, r4
 8001cd0:	1854      	adds	r4, r2, r1
 8001cd2:	42a3      	cmp	r3, r4
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	d1e0      	bne.n	8001c9a <_free_r+0x26>
 8001cd8:	681c      	ldr	r4, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	6053      	str	r3, [r2, #4]
 8001cde:	4421      	add	r1, r4
 8001ce0:	6011      	str	r1, [r2, #0]
 8001ce2:	e7da      	b.n	8001c9a <_free_r+0x26>
 8001ce4:	d902      	bls.n	8001cec <_free_r+0x78>
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	6003      	str	r3, [r0, #0]
 8001cea:	e7d6      	b.n	8001c9a <_free_r+0x26>
 8001cec:	6825      	ldr	r5, [r4, #0]
 8001cee:	1961      	adds	r1, r4, r5
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	bf04      	itt	eq
 8001cf4:	6819      	ldreq	r1, [r3, #0]
 8001cf6:	685b      	ldreq	r3, [r3, #4]
 8001cf8:	6063      	str	r3, [r4, #4]
 8001cfa:	bf04      	itt	eq
 8001cfc:	1949      	addeq	r1, r1, r5
 8001cfe:	6021      	streq	r1, [r4, #0]
 8001d00:	6054      	str	r4, [r2, #4]
 8001d02:	e7ca      	b.n	8001c9a <_free_r+0x26>
 8001d04:	b003      	add	sp, #12
 8001d06:	bd30      	pop	{r4, r5, pc}
 8001d08:	200000b4 	.word	0x200000b4

08001d0c <_read_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4d07      	ldr	r5, [pc, #28]	; (8001d2c <_read_r+0x20>)
 8001d10:	4604      	mov	r4, r0
 8001d12:	4608      	mov	r0, r1
 8001d14:	4611      	mov	r1, r2
 8001d16:	2200      	movs	r2, #0
 8001d18:	602a      	str	r2, [r5, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f7fe ff9c 	bl	8000c58 <_read>
 8001d20:	1c43      	adds	r3, r0, #1
 8001d22:	d102      	bne.n	8001d2a <_read_r+0x1e>
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	b103      	cbz	r3, 8001d2a <_read_r+0x1e>
 8001d28:	6023      	str	r3, [r4, #0]
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 8001d2c:	200000bc 	.word	0x200000bc

08001d30 <_fstat_r>:
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	4d07      	ldr	r5, [pc, #28]	; (8001d50 <_fstat_r+0x20>)
 8001d34:	2300      	movs	r3, #0
 8001d36:	4604      	mov	r4, r0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	602b      	str	r3, [r5, #0]
 8001d3e:	f7fe ffd0 	bl	8000ce2 <_fstat>
 8001d42:	1c43      	adds	r3, r0, #1
 8001d44:	d102      	bne.n	8001d4c <_fstat_r+0x1c>
 8001d46:	682b      	ldr	r3, [r5, #0]
 8001d48:	b103      	cbz	r3, 8001d4c <_fstat_r+0x1c>
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	bd38      	pop	{r3, r4, r5, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000bc 	.word	0x200000bc

08001d54 <_isatty_r>:
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4d06      	ldr	r5, [pc, #24]	; (8001d70 <_isatty_r+0x1c>)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	602b      	str	r3, [r5, #0]
 8001d60:	f7fe ffcf 	bl	8000d02 <_isatty>
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	d102      	bne.n	8001d6e <_isatty_r+0x1a>
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	b103      	cbz	r3, 8001d6e <_isatty_r+0x1a>
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	bd38      	pop	{r3, r4, r5, pc}
 8001d70:	200000bc 	.word	0x200000bc

08001d74 <_init>:
 8001d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d76:	bf00      	nop
 8001d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7a:	bc08      	pop	{r3}
 8001d7c:	469e      	mov	lr, r3
 8001d7e:	4770      	bx	lr

08001d80 <_fini>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr
